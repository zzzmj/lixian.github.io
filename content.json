{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"zzzmj","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2018-11-29T09:54:42.000Z","updated":"2018-11-29T10:00:20.892Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-11-29T09:48:42.000Z","updated":"2018-11-29T10:57:07.477Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"二叉树的三种遍历方式详解","slug":"二叉树的三种遍历方式详解","date":"2018-12-03T12:12:32.000Z","updated":"2018-12-03T13:26:47.934Z","comments":true,"path":"2018/12/03/二叉树的三种遍历方式详解/","link":"","permalink":"http://yoursite.com/2018/12/03/二叉树的三种遍历方式详解/","excerpt":"","text":"二叉树的遍历二叉树的遍历方式一般有四种： 先序遍历 中序遍历 后序遍历 层序遍历因为前三种遍历方式都是采用了递归的方法进行遍历, 这里只介绍前三种 图1： 先序遍历前序遍历:1.访问根节点。2.访问左子树。3.访问右子树 按照图1, 前序遍历的的遍历方式是 ABDECF 中序遍历前序遍历:1.访问左子树。2.访问根节点。3.访问右子树 按照图1, 中序遍历的遍历方式是 DBEACF 中序遍历的性质由于中序遍历总是把根结点放在左子树和右子树的中间, 因此只要知道根结点，就可以利用该性质还原出整颗二叉树 至于如何知道根结点，我们可以通过先序序列或者后序序列 因此：只要知道前序+中序或者中序+后序 我们就能还原二叉树 但是前序+中序 是做不到的 后序遍历后序遍历:1.访问左子树。2.访问右子树。 3.访问根节点。 按照图1, 中序遍历的遍历方式是 DEBFCA 重建二叉树给定后序序列和中序序列, 重建这颗二叉树 后序遍历: ACBFGED 中序遍历: ABCDEFG 先用手工试算出这个前序序列 第一步: 由后序遍历的最后一个元素知道整棵树最初的根节点为D 第二步:由中序序列知道左子树是｛A,B,C｝， 右子树是｛E,F,G｝ 重复一二两步，知道E是右子树的根节点，并存在右子树，没有左子树 反复套用一二两步规则，最终可得到整颗树 例题：PAT 1020 Tree Traversals （25 分）给定后序序列和中序序列，求层序序列 思路：还原整个二叉树，再层序遍历求解层序序列","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/categories/数据结构/"}],"tags":[{"name":"二叉树","slug":"二叉树","permalink":"http://yoursite.com/tags/二叉树/"},{"name":"二叉树的遍历","slug":"二叉树的遍历","permalink":"http://yoursite.com/tags/二叉树的遍历/"}]},{"title":"蓝桥杯历届试题 剪格子 Java实现","slug":"蓝桥杯历届试题-剪格子-Java实现","date":"2018-12-03T02:53:53.000Z","updated":"2018-12-03T02:59:53.943Z","comments":true,"path":"2018/12/03/蓝桥杯历届试题-剪格子-Java实现/","link":"","permalink":"http://yoursite.com/2018/12/03/蓝桥杯历届试题-剪格子-Java实现/","excerpt":"","text":"题目链接：http://lx.lanqiao.cn/problem.page?gpid=T27 这道题用深搜解决 注意点有几个地方 首先题目要求的是先输入列，再输入行(简直反人类！) 它说要从左上角开始搜，意味着vis[0][0]这个点一定要访问过 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import java.util.Scanner;/** * 剪格子 * @author zmj * @create 2018/12/2 */public class Main &#123; static int[] X = &#123;0, 0, -1, 1&#125;, Y = &#123;1, -1, 0, 0&#125;; static int[][] map = new int[15][15]; static int[][] vis = new int[15][15]; static int n, m, total, min; public static void dfs(int a, int b, int sum, int pos) &#123; if (sum &gt; total / 2) &#123; return; &#125; else if (sum == total / 2) &#123; if (pos &lt; min &amp;&amp; vis[0][0] == 1) &#123; min = pos; &#125; return; &#125; for (int i = 0; i &lt; 4; i++) &#123; int p = a + X[i]; int q = b + Y[i]; if (p &gt;= 0 &amp;&amp; p &lt; n &amp;&amp; q &gt;= 0 &amp;&amp; q &lt; m &amp;&amp; vis[p][q] == 0) &#123; sum += map[p][q]; vis[p][q] = 1; dfs(p, q, sum, pos + 1); sum -= map[p][q]; vis[p][q] = 0; &#125; &#125; &#125; public static void main(String[] args) &#123; Scanner in = new Scanner(System.in); m = in.nextInt(); n = in.nextInt(); total = 0; for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; m; j++) &#123; map[i][j] = in.nextInt(); total += map[i][j]; &#125; &#125; min = Integer.MAX_VALUE; if(total % 2 == 0) &#123; for (int i = 0; i &lt; n; i++) &#123; for (int j = 0; j &lt; m; j++) &#123; vis[i][j] = 1; dfs(i, j, map[i][j], 1); vis[i][j] = 0; &#125; &#125; if (min == Integer.MAX_VALUE) &#123; System.out.println('0'); &#125; else &#123; System.out.println(min); &#125; &#125; else &#123; System.out.println('0'); &#125; &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://yoursite.com/categories/算法/"}],"tags":[{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"http://yoursite.com/tags/蓝桥杯/"},{"name":"深搜","slug":"深搜","permalink":"http://yoursite.com/tags/深搜/"}]},{"title":"使用GitHub和Hexo搭建博客","slug":"使用GitHub和Hexo搭建博客","date":"2018-11-29T05:31:46.000Z","updated":"2018-11-29T10:02:32.003Z","comments":true,"path":"2018/11/29/使用GitHub和Hexo搭建博客/","link":"","permalink":"http://yoursite.com/2018/11/29/使用GitHub和Hexo搭建博客/","excerpt":"","text":"1. 前言使用GitHub和Hexo搭建博客, 也就是本博客的搭建过程 2. 准备工作 我们要使用hexo这个框架来做我们的静态网页，因为是基于node.js开发的，所以我们安装好node.js 然后我们用github来做网站，所以要有github账号 最后我们把我们的静态网页传到github上，所以需要git 3. 使用hexohexo官方文档：https://hexo.io/zh-cn/docs/ 首先我们去官网下载node.js，安装一路next就可以了 打开命令行输入node.v，npm.v命令查看是否安装成功 然后我们创建一个目录（这个目录很重要，就是作为我们博客的目录） 打开命令行，进入我们创建的目录 输入npm命令，安装我们的Hexo 1npm install -g hexo-cli 然后初始化我们的博客 1hexo init blog 给博客新建一篇文章 1hexo new test_my_site 用generate命令生成静态文件，下面这个命令也可以缩写成hexo g 1hexo generate 用server命令启动服务器，下面这个命令也可以缩写成hexo s 1hexo server 然后就打开http://localhost:4000/预览我们的网站吧！ 4. 使用github创建好github账号 新建仓库，仓库名字一定要是你的用户名.github.io，把readme.md也勾选上，我的仓库名字就是zzzmj.github.io 创建成功后，打开仓库进入setting，一路往下翻，看到Github Pages标题，然后看到下面的Souce打开选项，选择master branch，再保存Sava 然后你通过https://你的用户名.github.io/访问就能看到效果了~~ 5. 使用git将网页推送到github上这里我简单介绍下git的安装和配置 安装好git以后呢，在我们的目录下右键打开Git Bash Here 输入命令，配置用户名和密码 12git config --global user.name &quot;你的用户名&quot;git config --global user.email &quot;你的邮箱&quot; 生成ssh秘钥文件 这一步一定要做，我之前省事没做，发现更改主题的时候会有错误，不能将主题克隆下来 1ssh-keygen -t rsa -C &quot;你的邮箱&quot; 生成后，打开找到id_rsa.pub文件用记事本打开(这个文件目录git会告诉你)，然后复制全部内容 进入Github，打开我们用户的Setting，打开new SSH key 标题随便写，Key填入我们复制的内容，创建即可 打开我们本地博客根目录，找到_config.yml这个文件，它是我们的站点配置文件 打开这个文件，拉到最下面 1234deploy: type: git repo: 你的仓库名，复制下来就行 branch: master 然后我打开命令行，安装git部署插件 1npm install hexo-deployer-git --save 我们输入三条命令 123hexo clean hexo g hexo d clean命令是清除缓存的，这个命令可有可无 我们之间不是生成了静态文件吗，为什么这里还要使用hexo g命令呢，因为我们修改了配置文件，所以需要再更新一次 hexo d这条命令就是部署网站，是hexo deploy的缩写 大功告成，打开网站就能访问到了。 5. 更改主题更改主题挺方便的，我这里使用的主题是indigo 访问github里有详细的文档介绍，按照文档来就行 6. 怎么发布我们的文章看官方文档：https://hexo.io/zh-cn/docs/writing 7. 遇到的问题我在使用indigo主题的时候发现是一些文字日文，我们需要设置Hexo语言 将hexo 的 _config.yml 的 language:设定，设定为 zh-CN 访问tags和categories访问错误 Cannot GET /tags/ Cannot GET /categories/ 原因是我们没有配置tags和categories页面. 输入命令 12hexo new page tagshexo new page categories 修改 hexo/source/tags/index.md 的元数据 123layout: tagscomments: false--- 修改 hexo/source/categories/index.md 的元数据 123layout: categoriescomments: false---","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"搭建博客","slug":"搭建博客","permalink":"http://yoursite.com/tags/搭建博客/"}]},{"title":"test_my_site","slug":"test-my-site","date":"2018-11-26T02:22:16.000Z","updated":"2018-11-26T02:22:16.093Z","comments":true,"path":"2018/11/26/test-my-site/","link":"","permalink":"http://yoursite.com/2018/11/26/test-my-site/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-11-26T02:20:22.602Z","updated":"2018-11-26T02:20:22.603Z","comments":true,"path":"2018/11/26/hello-world/","link":"","permalink":"http://yoursite.com/2018/11/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}