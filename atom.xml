<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你好,世界</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-01T06:44:46.750Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zzzmj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript函数中this的四种绑定策略</title>
    <link href="http://yoursite.com/2019/01/01/JavaScript%E5%87%BD%E6%95%B0%E4%B8%ADthis%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%BB%91%E5%AE%9A%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2019/01/01/JavaScript函数中this的四种绑定策略/</id>
    <published>2019-01-01T06:44:36.000Z</published>
    <updated>2019-01-01T06:44:46.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this的四种绑定策略"><a href="#this的四种绑定策略" class="headerlink" title="this的四种绑定策略"></a>this的四种绑定策略</h2><ul><li>默认绑定</li><li>隐式绑定</li><li>显示绑定</li><li>new绑定</li></ul><h3 id="1-默认绑定"><a href="#1-默认绑定" class="headerlink" title="1. 默认绑定"></a>1. 默认绑定</h3><p>当一个函数没有明确的<strong>调用对象</strong>的时候，也就是单纯作为独立函数调用的时候，将对函数的this使用默认绑定：绑定到全局的window对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个例子</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">foo() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二个迷惑性的例子</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">    <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line">    inner()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">foo() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>第二个例子虽然在foo()作用域内声明了a变量为3, 但它并不是一个对象, 所以this最终还是会指向全局的window对象</p><h3 id="2-隐式绑定"><a href="#2-隐式绑定" class="headerlink" title="2. 隐式绑定"></a>2. 隐式绑定</h3><p>函数被调用时有上下文对象，那么this会绑定这个上下文对象</p><p>书上写的上下文对象意思很模糊, 觉得这里翻译的其实不太好</p><p>我感觉比较好的解释是：<strong>当函数被一个对象包含的时候, 我们称这个函数的this被隐式绑定到这个对象上了</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在一串对象属性引用链中, this绑定的是最内层的对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      obj2: &#123;</span><br><span class="line">           a: <span class="number">2</span>,</span><br><span class="line">           obj3: &#123;</span><br><span class="line">                a:<span class="number">3</span>,</span><br><span class="line">                getA: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)   </span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.obj2.obj3.getA();  <span class="comment">// 输出3</span></span><br></pre></td></tr></table></figure><h4 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h4><p>最常见的this绑定问题就是被隐式绑定的函数会丢失绑定对象, 也就是它会应用默认绑定, 把this绑定到全局对象或者undefined上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> bar = obj.foo </span><br><span class="line">bar() <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>像这个例子, obj对象把foo函数的引用传给bar的时候, 会丢失this对obj的绑定</p><p>回调函数同样也会丢失绑定<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line">setTimeout(obj.foo, <span class="number">100</span>) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p><p><strong>这种函数赋值的方式是无法将函数所绑定的this对象也传递过去的</strong></p><h3 id="3-显式绑定"><a href="#3-显式绑定" class="headerlink" title="3. 显式绑定"></a>3. 显式绑定</h3><p>显式绑定是通过<code>apply</code>或者<code>call</code>函数绑定的对象</p><p>如果你想传递函数并且把所绑定的this对象也传递过去, 那么就可以使用call()</p><p>fn.call(object)</p><ul><li>fn是你调用的函数</li><li>object是你希望绑定的对象</li><li>作用：即刻调用函数fn(), 调用时这个函数的this指向object</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.call(obj)</span><br></pre></td></tr></table></figure><p>这样做有个缺点, 每次调用都会依赖call</p><p>所以可以将它包装成函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo.call(obj)</span><br><span class="line">&#125;</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure></p><p>如果使用bind会更简单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = foo.bind(obj)</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure></p><p><strong>call和bind的区别是</strong>：在绑定this到对象参数的同时：</p><ol><li>call将立即执行该函数</li><li>bind不执行函数，只返回一个可供执行的函数</li></ol><h3 id="4-new绑定"><a href="#4-new绑定" class="headerlink" title="4. new绑定"></a>4. new绑定</h3><p>来new来调用函数，会自动执行下列操作</p><ol><li>创建一个全新的对象</li><li>这个新对象被执行[[prototype]]连接</li><li>这个新对象会绑定到函数调用的this</li><li>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(bar.a) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="5-优先级"><a href="#5-优先级" class="headerlink" title="5. 优先级"></a>5. 优先级</h3><p><strong>new绑定 &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</strong></p><p>参考资料：<br><a href="https://book.douban.com/subject/26351021/" target="_blank" rel="noopener">你不知道的JavaScript(上卷)</a><br><a href="http://www.cnblogs.com/penghuwan/p/7356210.html" target="_blank" rel="noopener">【javascript】函数中的this的四种绑定形式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;this的四种绑定策略&quot;&gt;&lt;a href=&quot;#this的四种绑定策略&quot; class=&quot;headerlink&quot; title=&quot;this的四种绑定策略&quot;&gt;&lt;/a&gt;this的四种绑定策略&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;默认绑定&lt;/li&gt;
&lt;li&gt;隐式绑定&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
      <category term="函数" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>for 循环中的setTimeout(function(){})异步问题</title>
    <link href="http://yoursite.com/2018/12/20/for-%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84setTimeout-function-%E5%BC%82%E6%AD%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/12/20/for-循环中的setTimeout-function-异步问题/</id>
    <published>2018-12-20T11:12:44.000Z</published>
    <updated>2018-12-26T00:58:49.552Z</updated>
    
    <content type="html"><![CDATA[<p>阅读这段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预期是分别输出数字1-5, 每秒1次，每次1个<br>结果却是每秒一次输出了5个6</p><h2 id="setTimeout的执行原理"><a href="#setTimeout的执行原理" class="headerlink" title="setTimeout的执行原理"></a>setTimeout的执行原理</h2><p>setTimeout()是一个异步方法, 传递一个函数，<br>延迟一段时候把该函数添加到队列当中，并不是立即执行,<br>而且必须等当前环境所有代码执行完以后, 才会运行</p><p>也就是说我们执行这个for循环的时候<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(fun(...), <span class="number">1000</span>)</span><br><span class="line">setTimeout(fun(...), <span class="number">2000</span>)</span><br><span class="line">setTimeout(fun(...), <span class="number">3000</span>)</span><br><span class="line">setTimeout(fun(...), <span class="number">4000</span>)</span><br><span class="line">setTimeout(fun(...), <span class="number">5000</span>)</span><br></pre></td></tr></table></figure></p><p>五个函数先进入了队列, 然后等for循环结束后再依次出队 (粗略理解, 实质上是回调函数)<br>for循环结束后, 此时i是等于6的, 所以每秒一次输出了5个6</p><p><strong>要注意到var定义的i实质上是全局变量</strong>, 等同于下面的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="使用闭包"><a href="#使用闭包" class="headerlink" title="使用闭包"></a>使用闭包</h3><p>这个办法的原理是创建了闭包作用域, 每次循环会生成一个新的闭包作用域, 使得延迟函数回调可以访问到正确的值</p><p>注意, 闭包作用域里必须声明变量j, 如果是一个空的作用域, 那不会产生作用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j);</span><br><span class="line">        &#125;, j*<span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用ES6中的let"><a href="#使用ES6中的let" class="headerlink" title="使用ES6中的let"></a>使用ES6中的let</h3><p>这个办法的原理是通过let来劫持块作用域, 注意, 这个变量i不只会声明一次, 每次迭代的时候都会声明i, 每次迭代后, i的值都会使用</p><p>上一个迭代的值来初始化这个变量, 形成一个块作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阅读这段代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>使用python 原生socket搭建简单服务器</title>
    <link href="http://yoursite.com/2018/12/07/%E4%BD%BF%E7%94%A8python-%E5%8E%9F%E7%94%9Fsocket%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2018/12/07/使用python-原生socket搭建简单服务器/</id>
    <published>2018-12-07T08:37:19.000Z</published>
    <updated>2018-12-07T08:47:39.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用socket搭建简单的服务器"><a href="#使用socket搭建简单的服务器" class="headerlink" title="使用socket搭建简单的服务器"></a>使用socket搭建简单的服务器</h2><p>socket通信流程<br><img src="https://images2017.cnblogs.com/blog/1199740/201709/1199740-20170915104804953-3885330.png" alt=""></p><p>chrome浏览器模拟客户端, 访问该服务器, 显示文字和图片</p><p>其中值得注意的地方: 当我键入服务器地址访问时, chrome浏览器给服务器发送了<strong>四个http请求</strong></p><ul><li><p>请求1: 请求主页</p><blockquote><p>GET / HTTP/1.1<br>Host: localhost:3000</p></blockquote></li><li><p>请求2: 请求图片</p><blockquote><p>GET /doge.gif HTTP/1.1<br>Host: localhost:3000</p></blockquote></li><li><p>请求3：请求标签栏图标</p><blockquote><p>GET /favicon.ico HTTP/1.1<br>Host: localhost:3000</p></blockquote></li><li><p>请求4：空请求</p><p>  会导致程序报错, 需要捕获这个请求，因为会我写的responce_for_pat里没有响应空请求</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route_index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    主页的处理函数, 返回主页的响应</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    header = <span class="string">'HTTP/1.x 200 OK\r\nContent-Type: text/html\r\n'</span></span><br><span class="line">    body = <span class="string">'&lt;h1&gt;Hello World&lt;/h1&gt;&lt;img src="doge.gif"/&gt;'</span></span><br><span class="line">    r = header + <span class="string">'\r\n'</span> + body</span><br><span class="line">    <span class="keyword">return</span> r.encode(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route_img</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图片的处理函数, 读取图片并生成响应返回</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'doge.gif'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        header = <span class="string">b'HTTP/1.x 200 OK\r\nContent-Type: image/gif\r\n\r\n'</span></span><br><span class="line">        img = header + f.read()</span><br><span class="line">        <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">responce_for_path</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据 path 调用相应的处理函数</span></span><br><span class="line"><span class="string">    没有处理的 path 会返回 404</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    r = &#123;</span><br><span class="line">        <span class="string">'/'</span>: route_index,</span><br><span class="line">        <span class="string">'/doge.gif'</span>: route_img,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 这里得到的是一个函数体</span></span><br><span class="line">    responce = r.get(path)</span><br><span class="line">    <span class="keyword">return</span> responce()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(host=<span class="string">''</span>, port=<span class="number">3000</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    启动服务器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 初始化socket</span></span><br><span class="line">    <span class="keyword">with</span> socket.socket() <span class="keyword">as</span> s:</span><br><span class="line">        s.bind((host, port))</span><br><span class="line">        <span class="comment"># 监听 接收 读取请求数据</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            s.listen(<span class="number">5</span>)</span><br><span class="line">            connection, address = s.accept()</span><br><span class="line">            request = connection.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">            print(<span class="string">'ip = &#123;&#125;\nrequest = &#123;&#125;'</span>.format(address, request))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 得到HTTP请求的路径</span></span><br><span class="line">                path = request.split()[<span class="number">1</span>]</span><br><span class="line">                <span class="comment"># 根据路径返回响应</span></span><br><span class="line">                responce = responce_for_path(path)</span><br><span class="line">                <span class="comment"># 响应给客户端(浏览器)</span></span><br><span class="line">                connection.sendall(responce)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">'error'</span>, e)</span><br><span class="line">            connection.close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    config = dict(</span><br><span class="line">        host=<span class="string">''</span>,</span><br><span class="line">        port=<span class="number">3000</span>,</span><br><span class="line">    )</span><br><span class="line">    run(**config)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用socket搭建简单的服务器&quot;&gt;&lt;a href=&quot;#使用socket搭建简单的服务器&quot; class=&quot;headerlink&quot; title=&quot;使用socket搭建简单的服务器&quot;&gt;&lt;/a&gt;使用socket搭建简单的服务器&lt;/h2&gt;&lt;p&gt;socket通信流程&lt;br&gt;
      
    
    </summary>
    
      <category term="Web通信" scheme="http://yoursite.com/categories/Web%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="socket" scheme="http://yoursite.com/tags/socket/"/>
    
      <category term="server" scheme="http://yoursite.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>使用python 原生socket爬取豆瓣top250 (客户端)</title>
    <link href="http://yoursite.com/2018/12/07/%E4%BD%BF%E7%94%A8python-%E5%8E%9F%E7%94%9Fsocket%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3top25/"/>
    <id>http://yoursite.com/2018/12/07/使用python-原生socket爬取豆瓣top25/</id>
    <published>2018-12-07T02:34:10.000Z</published>
    <updated>2018-12-07T08:39:11.884Z</updated>
    
    <content type="html"><![CDATA[<p>了解底层socket原理, 有助于理解网络知识<br>这是一个客户端的编写。</p><p>socket通信流程<br><img src="https://images2017.cnblogs.com/blog/1199740/201709/1199740-20170915104804953-3885330.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用原生socket实现一个具有基本功能的socket, 并抓取了豆瓣top250的数据</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    解析 url 返回 (protocol host port path)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    protocol = <span class="string">'http'</span></span><br><span class="line">    i = url.find(<span class="string">'://'</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">-1</span>:</span><br><span class="line">        u = url</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        protocol = url[<span class="number">0</span>:i]</span><br><span class="line">        u = url.split(<span class="string">'://'</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 2. 解析host和path</span></span><br><span class="line">    i = u.find(<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">-1</span>:</span><br><span class="line">        host = u</span><br><span class="line">        path = <span class="string">'/'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host = u[:i]</span><br><span class="line">        path = u[i:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.解析端口</span></span><br><span class="line">    port_dict = &#123;</span><br><span class="line">        <span class="string">'http'</span>: <span class="number">80</span>,</span><br><span class="line">        <span class="string">'https'</span>: <span class="number">443</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 默认端口</span></span><br><span class="line">    port = port_dict[protocol]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">':'</span> <span class="keyword">in</span> host:</span><br><span class="line">        h = host.split(<span class="string">':'</span>)</span><br><span class="line">        host = h[<span class="number">0</span>]</span><br><span class="line">        port = int(h[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print('protocol = &#123;&#125;\nhost = &#123;&#125;\nport = &#123;&#125;\nsearch = &#123;&#125;\n------------'.format(protocol, host, port, path))</span></span><br><span class="line">    <span class="keyword">return</span> protocol, host, port, path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">socket_by_protocol</span><span class="params">(protocol)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据协议返回一个 socket 实例</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> protocol == <span class="string">'http'</span>:</span><br><span class="line">        s = socket.socket()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># HTTPS 协议需要使用 ssl.wrap_socket 包装一下原始的 socket</span></span><br><span class="line">        s = ssl.wrap_socket(socket.socket())</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response_by_socket</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    参数是一个 socket 实例</span></span><br><span class="line"><span class="string">    返回这个 socket 读取的所有数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    response = <span class="string">b''</span></span><br><span class="line">    buffer_size = <span class="number">1024</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        r = s.recv(buffer_size)</span><br><span class="line">        <span class="keyword">if</span> len(r) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        response += r</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_responce</span><span class="params">(r)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    解析responce, 返回一个(status_code, headers, body)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    headers, body = r.split(<span class="string">'\r\n\r\n'</span>, <span class="number">1</span>)</span><br><span class="line">    h = headers.split(<span class="string">'\r\n'</span>)</span><br><span class="line">    status_code = int(h[<span class="number">0</span>].split(<span class="string">" "</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> h[<span class="number">1</span>:]:</span><br><span class="line">        k, v = line.split(<span class="string">': '</span>)</span><br><span class="line">        headers[k] = v</span><br><span class="line">    <span class="keyword">return</span> status_code, headers, body</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用get访问一个url地址, 并返回响应(status_code, headers, body)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    protocol, host, port, path = parse_url(url)</span><br><span class="line">    s = socket_by_protocol(protocol)</span><br><span class="line"></span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    request = <span class="string">'GET &#123;&#125; HTTP/1.1\r\nhost: &#123;&#125;\r\nConnection: close\r\n\r\n'</span>.format(</span><br><span class="line">        path, host)</span><br><span class="line">    s.send(request.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    responce = response_by_socket(s).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    status_code, headers, body = parse_responce(responce)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> status_code <span class="keyword">in</span> [<span class="number">301</span>, <span class="number">302</span>]:</span><br><span class="line">        url = headers[<span class="string">'Location'</span>]</span><br><span class="line">        <span class="keyword">return</span> get(url)</span><br><span class="line">    <span class="keyword">return</span> status_code, headers, body</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    url = <span class="string">'http://movie.douban.com/top250'</span></span><br><span class="line">    status_code, headers, body = get(url)</span><br><span class="line">    print(body)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;了解底层socket原理, 有助于理解网络知识&lt;br&gt;这是一个客户端的编写。&lt;/p&gt;
&lt;p&gt;socket通信流程&lt;br&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1199740/201709/1199740-20170915
      
    
    </summary>
    
      <category term="Web通信" scheme="http://yoursite.com/categories/Web%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="socket" scheme="http://yoursite.com/tags/socket/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的三种遍历方式详解</title>
    <link href="http://yoursite.com/2018/12/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/12/03/二叉树的三种遍历方式详解/</id>
    <published>2018-12-03T12:12:32.000Z</published>
    <updated>2018-12-03T13:26:47.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>二叉树的遍历方式一般有四种：</p><ul><li>先序遍历</li><li>中序遍历</li><li>后序遍历</li><li>层序遍历<br>因为前三种遍历方式都是采用了递归的方法进行遍历, 这里只介绍前三种</li></ul><p><code>图1：</code><br><img src="http://wx2.sinaimg.cn/mw690/006PpBLogy1fxttx5k6tuj30f10bfq37.jpg" alt=""></p><h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h2><p>前序遍历:<br>1.访问根节点。2.访问左子树。3.访问右子树</p><p>按照图1, 前序遍历的的遍历方式是</p><blockquote><p>ABDECF</p></blockquote><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>前序遍历:<br>1.访问左子树。2.访问根节点。3.访问右子树</p><p>按照图1, 中序遍历的遍历方式是</p><blockquote><p>DBEACF</p></blockquote><h3 id="中序遍历的性质"><a href="#中序遍历的性质" class="headerlink" title="中序遍历的性质"></a>中序遍历的性质</h3><p>由于中序遍历总是把根结点放在左子树和右子树的中间, 因此只要知道根结点，就可以利用该性质还原出整颗二叉树</p><p>至于如何知道根结点，我们可以通过先序序列或者后序序列</p><p>因此：只要知道<code>前序+中序</code>或者<code>中序+后序</code> 我们就能还原二叉树</p><p>但是<code>前序+中序</code> 是做不到的</p><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p>后序遍历:<br>1.访问左子树。2.访问右子树。 3.访问根节点。</p><p>按照图1, 中序遍历的遍历方式是</p><blockquote><p>DEBFCA</p></blockquote><h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><p>给定后序序列和中序序列, 重建这颗二叉树</p><p><strong>后序遍历: ACBFGED</strong></p><p><strong>中序遍历: ABCDEFG</strong></p><p>先用手工试算出这个前序序列</p><ol><li><p>第一步: 由后序遍历的最后一个元素知道整棵树最初的根节点为D<br><img src="http://wx3.sinaimg.cn/mw690/006PpBLogy1fxtvfh93sdj3058060mx4.jpg" alt=""></p></li><li><p>第二步:<br>由中序序列知道左子树是｛A,B,C｝， 右子树是｛E,F,G｝</p></li></ol><p>重复一二两步，知道E是右子树的根节点，并存在右子树，没有左子树</p><p>反复套用一二两步规则，最终可得到整颗树<br><img src="http://wx3.sinaimg.cn/mw690/006PpBLogy1fxtvg2hyadj307g08ydfx.jpg" alt=""></p><h2 id="例题：PAT-1020-Tree-Traversals-（25-分）"><a href="#例题：PAT-1020-Tree-Traversals-（25-分）" class="headerlink" title="例题：PAT 1020 Tree Traversals （25 分）"></a>例题：PAT 1020 Tree Traversals （25 分）</h2><p>给定后序序列和中序序列，求层序序列</p><p>思路：还原整个二叉树，再层序遍历求解层序序列</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉树的遍历&quot;&gt;&lt;a href=&quot;#二叉树的遍历&quot; class=&quot;headerlink&quot; title=&quot;二叉树的遍历&quot;&gt;&lt;/a&gt;二叉树的遍历&lt;/h2&gt;&lt;p&gt;二叉树的遍历方式一般有四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先序遍历&lt;/li&gt;
&lt;li&gt;中序遍历&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="二叉树的遍历" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯历届试题 剪格子 Java实现</title>
    <link href="http://yoursite.com/2018/12/03/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%8E%86%E5%B1%8A%E8%AF%95%E9%A2%98-%E5%89%AA%E6%A0%BC%E5%AD%90-Java%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/12/03/蓝桥杯历届试题-剪格子-Java实现/</id>
    <published>2018-12-03T02:53:53.000Z</published>
    <updated>2018-12-03T02:59:53.943Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="http://lx.lanqiao.cn/problem.page?gpid=T27" target="_blank" rel="noopener">http://lx.lanqiao.cn/problem.page?gpid=T27</a></p><p>这道题用深搜解决</p><p>注意点有几个地方</p><ul><li><strong>首先题目要求的是先输入列，再输入行</strong>(简直反人类！)</li><li>它说要从左上角开始搜，意味着<code>vis[0][0]</code>这个点一定要访问过</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 剪格子</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zmj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2018/12/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[] X = &#123;<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>&#125;, Y = &#123;<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] map = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span>[][] vis = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> n, m, total, min;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> sum, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; total / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum == total / <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pos &lt; min &amp;&amp; vis[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                min = pos;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = a + X[i];</span><br><span class="line">            <span class="keyword">int</span> q = b + Y[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (p &gt;= <span class="number">0</span> &amp;&amp; p &lt; n &amp;&amp; q &gt;= <span class="number">0</span> &amp;&amp; q &lt; m &amp;&amp; vis[p][q] == <span class="number">0</span>) &#123;</span><br><span class="line">                sum += map[p][q];</span><br><span class="line">                vis[p][q] = <span class="number">1</span>;</span><br><span class="line">                dfs(p, q, sum, pos + <span class="number">1</span>);</span><br><span class="line">                sum -= map[p][q];</span><br><span class="line">                vis[p][q] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        m = in.nextInt();</span><br><span class="line">        n = in.nextInt();</span><br><span class="line">        total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                map[i][j] = in.nextInt();</span><br><span class="line">                total += map[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        min = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">if</span>(total % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    vis[i][j] = <span class="number">1</span>;</span><br><span class="line">                    dfs(i, j, map[i][j], <span class="number">1</span>);</span><br><span class="line">                    vis[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (min == Integer.MAX_VALUE) &#123;</span><br><span class="line">                System.out.println(<span class="string">'0'</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(min);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目链接：&lt;a href=&quot;http://lx.lanqiao.cn/problem.page?gpid=T27&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://lx.lanqiao.cn/problem.page?gpid=T27&lt;/a&gt;&lt;/
      
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="蓝桥杯" scheme="http://yoursite.com/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
      <category term="深搜" scheme="http://yoursite.com/tags/%E6%B7%B1%E6%90%9C/"/>
    
  </entry>
  
  <entry>
    <title>使用GitHub和Hexo搭建博客</title>
    <link href="http://yoursite.com/2018/11/29/%E4%BD%BF%E7%94%A8GitHub%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/11/29/使用GitHub和Hexo搭建博客/</id>
    <published>2018-11-29T05:31:46.000Z</published>
    <updated>2018-11-29T10:02:32.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>使用<code>GitHub</code>和<code>Hexo</code>搭建博客, 也就是本博客的搭建过程</p><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h2><ul><li>我们要使用<code>hexo</code>这个框架来做我们的静态网页，因为是基于<code>node.js</code>开发的，所以我们安装好<code>node.js</code></li><li>然后我们用<code>github</code>来做网站，所以要有<code>github</code>账号</li><li>最后我们把我们的静态网页传到<code>github</code>上，所以需要<code>git</code></li></ul><h2 id="3-使用hexo"><a href="#3-使用hexo" class="headerlink" title="3. 使用hexo"></a>3. 使用hexo</h2><p><code>hexo</code>官方文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p><ol><li><p>首先我们去官网下载<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a>，安装一路next就可以了</p><ul><li>打开命令行输入<code>node.v</code>，<code>npm.v</code>命令查看是否安装成功</li></ul></li><li><p>然后我们创建一个目录（这个目录很重要，就是作为我们博客的目录）</p></li><li><p>打开命令行，进入我们创建的目录</p><ul><li><p>输入<code>npm</code>命令，安装我们的<code>Hexo</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>然后初始化我们的博客</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></li><li><p>给博客新建一篇文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new test_my_site</span><br></pre></td></tr></table></figure></li><li><p>用<strong>generate</strong>命令生成静态文件，下面这个命令也可以缩写成<code>hexo g</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></li><li><p>用<strong>server</strong>命令启动服务器，下面这个命令也可以缩写成<code>hexo s</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li><li><p>然后就打开<code>http://localhost:4000/</code>预览我们的网站吧！</p></li></ul></li></ol><h2 id="4-使用github"><a href="#4-使用github" class="headerlink" title="4. 使用github"></a>4. 使用github</h2><p>创建好<code>github</code>账号</p><ol><li>新建仓库，仓库名字一定要是<code>你的用户名.github.io</code>，把<code>readme.md</code>也勾选上，我的仓库名字就是<code>zzzmj.github.io</code></li><li>创建成功后，打开仓库进入<code>setting</code>，一路往下翻，看到<code>Github Pages</code>标题，然后看到下面的<code>Souce</code>打开选项，选择<code>master branch</code>，再保存<code>Sava</code></li><li>然后你通过<code>https://你的用户名.github.io/</code>访问就能看到效果了~~</li></ol><h2 id="5-使用git将网页推送到github上"><a href="#5-使用git将网页推送到github上" class="headerlink" title="5. 使用git将网页推送到github上"></a>5. 使用git将网页推送到github上</h2><p>这里我简单介绍下git的安装和配置</p><p>安装好git以后呢，在我们的目录下右键打开<code>Git Bash Here</code></p><p>输入命令，配置用户名和密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>生成<code>ssh</code>秘钥文件</p><p>这一步一定要做，我之前省事没做，发现更改主题的时候会有错误，不能将主题克隆下来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>生成后，打开找到<code>id_rsa.pub</code>文件用记事本打开(这个文件目录<code>git</code>会告诉你)，然后复制全部内容</p><p>进入<code>Github</code>，打开我们用户的<code>Setting</code>，打开<code>new SSH key</code></p><p>标题随便写，Key填入我们复制的内容，创建即可</p><ol><li><p>打开我们本地博客根目录，找到<code>_config.yml</code>这个文件，它是我们的<strong>站点配置文件</strong></p></li><li><p>打开这个文件，拉到最下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: 你的仓库名，复制下来就行</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>然后我打开命令行，安装git部署插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>我们输入三条命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li><code>clean</code>命令是清除缓存的，这个命令可有可无</li><li>我们之间不是生成了静态文件吗，为什么这里还要使用<code>hexo g</code>命令呢，因为我们修改了配置文件，所以需要再更新一次</li><li><code>hexo d</code>这条命令就是部署网站，是<code>hexo deploy</code>的缩写</li></ul></li><li><p>大功告成，打开网站就能访问到了。</p></li></ol><h2 id="5-更改主题"><a href="#5-更改主题" class="headerlink" title="5. 更改主题"></a>5. 更改主题</h2><p>更改主题挺方便的，我这里使用的主题是<a href="https://github.com/yscoder/hexo-theme-indigo/wiki" target="_blank" rel="noopener">indigo</a></p><p>访问<code>github</code>里有详细的文档介绍，按照文档来就行</p><h2 id="6-怎么发布我们的文章"><a href="#6-怎么发布我们的文章" class="headerlink" title="6. 怎么发布我们的文章"></a>6. 怎么发布我们的文章</h2><p>看官方文档：<a href="https://hexo.io/zh-cn/docs/writing" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/writing</a></p><h2 id="7-遇到的问题"><a href="#7-遇到的问题" class="headerlink" title="7. 遇到的问题"></a>7. 遇到的问题</h2><p>我在使用indigo主题的时候发现是一些文字日文，我们需要设置Hexo语言</p><p>将hexo 的 <code>_config.yml</code> 的 <code>language:</code>设定，设定为 zh-CN</p><p>访问<code>tags</code>和<code>categories</code>访问错误</p><blockquote><p> Cannot GET /tags/ </p><p> Cannot GET /categories/</p></blockquote><p>原因是我们没有配置<code>tags</code>和<code>categories</code>页面.</p><p>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>修改 <code>hexo/source/tags/index.md</code> 的元数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: tags</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>修改 <code>hexo/source/categories/index.md</code> 的元数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: categories</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;GitHub&lt;/code&gt;和&lt;code&gt;Hexo&lt;/code&gt;搭建博客, 也就是本博客的搭建过程&lt;/p&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="搭建博客" scheme="http://yoursite.com/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>test_my_site</title>
    <link href="http://yoursite.com/2018/11/26/test-my-site/"/>
    <id>http://yoursite.com/2018/11/26/test-my-site/</id>
    <published>2018-11-26T02:22:16.000Z</published>
    <updated>2018-11-26T02:22:16.093Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/26/hello-world/"/>
    <id>http://yoursite.com/2018/11/26/hello-world/</id>
    <published>2018-11-26T02:20:22.602Z</published>
    <updated>2018-11-26T02:20:22.603Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
