<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你好,世界</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-14T07:54:20.269Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zzzmj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js实现拖拽效果（二）：面向对象封装</title>
    <link href="http://yoursite.com/2019/06/14/js%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%95%88%E6%9E%9C%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2019/06/14/js实现拖拽效果（二）：面向对象封装/</id>
    <published>2019-06-14T07:53:41.000Z</published>
    <updated>2019-06-14T07:54:20.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在<a href="https://blog.csdn.net/qq799028706/article/details/91965320" target="_blank" rel="noopener">上一篇文章</a>中，已经实现了拖拽的效果，但并不利用复用，我们使用面向对象的方式，将代码重构一遍。</p><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Drag</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 传进来的如果是DOM对象则不用再查找</span></span><br><span class="line">        <span class="keyword">this</span>.elem = <span class="keyword">typeof</span> selector == <span class="string">'object'</span> ? selector : <span class="built_in">document</span>.querySelector(selector)</span><br><span class="line">        <span class="comment">// 鼠标在盒子内部的偏移</span></span><br><span class="line">        <span class="keyword">this</span>.innerDis = &#123;&#125; </span><br><span class="line">        <span class="keyword">this</span>.init()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Drag.prototype = &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: Drag,</span><br><span class="line">        init: function() &#123;</span><br><span class="line">            <span class="keyword">this</span>.handleDrag()</span><br><span class="line">        &#125;,</span><br><span class="line">        getStyle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(<span class="keyword">this</span>.elem, <span class="literal">null</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        getTargetPos: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> elemStyle = <span class="keyword">this</span>.getStyle()</span><br><span class="line">            <span class="keyword">var</span> pos = &#123;</span><br><span class="line">                x: <span class="built_in">parseInt</span>(elemStyle.left.slice(<span class="number">0</span>, <span class="number">-2</span>)),</span><br><span class="line">                y: <span class="built_in">parseInt</span>(elemStyle.top.slice(<span class="number">0</span>, <span class="number">-2</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> pos</span><br><span class="line">        &#125;,</span><br><span class="line">        setTargetPos: <span class="function"><span class="keyword">function</span>(<span class="params">pos</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.elem.style.left = pos.x</span><br><span class="line">            <span class="keyword">this</span>.elem.style.top = pos.y</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.elem</span><br><span class="line">        &#125;,</span><br><span class="line">        handleDrag: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> divPos = self.getTargetPos()</span><br><span class="line">                <span class="comment">// 鼠标按下的时候，记录鼠标在div内部的距离</span></span><br><span class="line">                <span class="keyword">var</span> innerDis = &#123;</span><br><span class="line">                    x: event.clientX - divPos.x,</span><br><span class="line">                    y: event.clientY - divPos.y</span><br><span class="line">                &#125;</span><br><span class="line">                self.innerDis = innerDis</span><br><span class="line">                <span class="comment">// 注意必须绑定在document对象上，如果绑定在box对象上，当鼠标脱快了移出box盒子时，就会产生BUG</span></span><br><span class="line">                <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, move, <span class="literal">false</span>)</span><br><span class="line">                <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, end, <span class="literal">false</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 拖动元素的新位置 = 鼠标移动到的新位置 - 鼠标在div的内部距离</span></span><br><span class="line">                <span class="keyword">var</span> pos = &#123;</span><br><span class="line">                    x: (event.clientX - self.innerDis.x) + <span class="string">'px'</span>,</span><br><span class="line">                    y: (event.clientY - self.innerDis.y) + <span class="string">'px'</span>,</span><br><span class="line">                &#125;</span><br><span class="line">                self.setTargetPos(pos)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, move)</span><br><span class="line">                <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, end)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.elem.addEventListener(<span class="string">'mousedown'</span>, start)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.Drag = Drag</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Drag(<span class="string">'.box'</span>)</span><br></pre></td></tr></table></figure><p>还可以写成jquery插件的形式</p><p>添加上代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $.fn.extend(&#123;</span><br><span class="line">    becomeDrag: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">new</span> Drag(<span class="keyword">this</span>[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;   <span class="comment">// 保证链式访问</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.box'</span>).becomeDrag()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.csdn.net/qq799028706/article/details/
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>js实现拖拽效果（一）：原理实现</title>
    <link href="http://yoursite.com/2019/06/14/js%E5%AE%9E%E7%8E%B0%E6%8B%96%E6%8B%BD%E6%95%88%E6%9E%9C%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%8E%9F%E7%90%86%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/06/14/js实现拖拽效果（一）：原理实现/</id>
    <published>2019-06-14T07:53:32.000Z</published>
    <updated>2019-06-14T07:53:59.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h2><p>JS 拖拽一个元素的原理：<br>首先要明白三个值</p><ol><li>鼠标的位置A = {x, y}</li><li>盒子的位置B = {x, y}</li><li>鼠标在盒子内的距离C = {A.x - B.x, A.y - B.y}</li></ol><p>涉及到三个鼠标事件</p><ul><li>鼠标按下时，<code>mousedown</code></li><li>鼠标移动时，<code>mousemove</code></li><li>鼠标松开时，<code>mouseup</code></li></ul><p>然后就可以开始讲明实现过程了</p><ul><li>鼠标按下的时候，计算出C，鼠标在盒子里距离（鼠标位置 - 盒子位置）</li><li>鼠标移动的时候，更新盒子位置 B = A - C</li><li>鼠标松开的时候，关闭2, 3过程的两个鼠标监听器</li></ul><h2 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h2><p>html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: beige;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: move;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素的样式</span></span><br><span class="line"><span class="keyword">var</span> getStyle = <span class="function"><span class="keyword">function</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(box, <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取目标元素的位置</span></span><br><span class="line"><span class="keyword">var</span> getTargetPos = <span class="function"><span class="keyword">function</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elemStyle = getStyle(elem)</span><br><span class="line">    <span class="keyword">var</span> pos = &#123;</span><br><span class="line">        x: <span class="built_in">parseInt</span>(elemStyle.left.slice(<span class="number">0</span>, <span class="number">-2</span>)),</span><br><span class="line">        y: <span class="built_in">parseInt</span>(elemStyle.top.slice(<span class="number">0</span>, <span class="number">-2</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pos</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置目标元素的位置</span></span><br><span class="line"><span class="keyword">var</span> setTargetPos = <span class="function"><span class="keyword">function</span>(<span class="params">elem, pos</span>) </span>&#123;</span><br><span class="line">    elem.style.left = pos.left</span><br><span class="line">    elem.style.top = pos.top</span><br><span class="line">    <span class="keyword">return</span> elem</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">box.addEventListener(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> divPos = getTargetPos(box)</span><br><span class="line">    <span class="keyword">var</span> mousePos = &#123;</span><br><span class="line">        x: event.clientX,</span><br><span class="line">        y: event.clientY</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 鼠标按下的时候，记录鼠标在div内部的距离</span></span><br><span class="line">    <span class="keyword">var</span> innerDis = &#123;</span><br><span class="line">        x: event.clientX - divPos.x,</span><br><span class="line">        y: event.clientY - divPos.y</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> move = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 鼠标移动到的新位置 - 鼠标在div的内部距离 即是拖动元素的新位置</span></span><br><span class="line">        setTargetPos(box, &#123;</span><br><span class="line">            left: (event.clientX - innerDis.x) + <span class="string">'px'</span>,</span><br><span class="line">            top: (event.clientY - innerDis.y) + <span class="string">'px'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> end = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, move)</span><br><span class="line">        <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, end)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须绑定在document对象上，如果绑定在box对象上，当鼠标脱快了移出box盒子时，就会产生BUG</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, move, <span class="literal">false</span>)</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, end, <span class="literal">false</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样做实现了效果，但并不利用复用</p><p>下一篇文章会对我们的拖拽效果进行封装</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-原理&quot;&gt;&lt;a href=&quot;#1-原理&quot; class=&quot;headerlink&quot; title=&quot;1. 原理&quot;&gt;&lt;/a&gt;1. 原理&lt;/h2&gt;&lt;p&gt;JS 拖拽一个元素的原理：&lt;br&gt;首先要明白三个值&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;鼠标的位置A = {x, y}&lt;/li&gt;

      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>js获取元素的left和top值方法总结</title>
    <link href="http://yoursite.com/2019/06/14/js%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E7%9A%84left%E5%92%8Ctop%E5%80%BC%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/06/14/js获取元素的left和top值方法总结/</id>
    <published>2019-06-14T02:30:19.000Z</published>
    <updated>2019-06-14T02:47:17.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p>使用<code>obj.style.left</code>和<code>obj.style.top</code></p><p>该方法获取到的样式可读可写</p><p>但是这种方法有局限性，仅能获取行内样式中的left，right。<br>如果写在了style标签里，或者link引入的css文件中，则获取不到</p><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>使用<code>window.getComputedStyle</code><br>该方法接收两个参数<br>第一个参数是，要获取样式的元素<br>第二个是可选参数，要匹配的伪元素的字符串</p><p>用法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>)</span><br><span class="line"><span class="keyword">var</span> boxStyle = <span class="built_in">window</span>.getComputedStyle(box, <span class="literal">null</span>)</span><br><span class="line"><span class="built_in">console</span>.log(boxStyle.left + <span class="string">' '</span> + boxStyle.top)</span><br></pre></td></tr></table></figure></p><p>该方法获取到的样式是可读不可写的</p><h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2><p>使用<code>obj.offsetLeft</code>和<code>obj.offsetTop</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(box.offsetLeft + <span class="string">' '</span> + box.offsetTop)</span><br></pre></td></tr></table></figure><p>该方法可读不可写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;方法一：&quot;&gt;&lt;a href=&quot;#方法一：&quot; class=&quot;headerlink&quot; title=&quot;方法一：&quot;&gt;&lt;/a&gt;方法一：&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;obj.style.left&lt;/code&gt;和&lt;code&gt;obj.style.top&lt;/code&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>2019年团体程序设计天梯赛总结</title>
    <link href="http://yoursite.com/2019/03/31/2019%E5%B9%B4%E5%9B%A2%E4%BD%93%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%A9%E6%A2%AF%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/03/31/2019年团体程序设计天梯赛总结/</id>
    <published>2019-03-31T03:45:23.000Z</published>
    <updated>2019-03-31T03:54:04.437Z</updated>
    
    <content type="html"><![CDATA[<p>从寒假开始，我很少碰竞赛相关的题目了，感觉已经没有了以前的热情，直到dxl在群里提出参加天梯赛一事时，团体提出了搞天梯赛，一开始我是不想去的，感觉自己退步了很多，不想再参与之类的竞赛。但回头想想蓝桥杯也是需要刷题的，训练一下算法，对两个比赛都有好处。于是还是去尝试的参加了一下选拔赛，发现成绩还可以，后来团队也开始讨论江西各大高校实力，天梯赛相关的事情。不知为何，我突然被点起了热情，也想看看我们学校和江西其他高校的差距（争强好胜？哈哈(#^.^#)），经过重重选拔，侥幸的进入了一队（爱，死亡与机器人）</p><p>然后就是坐车去南昌，大家一起找地方住，住宾馆的时候大家都在讨论分房间的事情，两个两个的约好了一起住，由于我与团队脱节太久，寒假至比赛期间我很少在团队里说话，和团队的人接触。住宾馆的时候，16级就我落单了。大家都找好了小伙伴，后来安排了我和一个17级的学弟住，心里还挺不是滋味的。在睡觉的时候想了想，原因大概就是自己不说话，诶，其实我以前还挺活跃的。</p><p>比赛当天，心情还是很紧张的，担心拖大家的后腿。做题的时候前面还是比较顺利，L1难度的题都比较简单，但L1-8题，我看了一下，通过率好低，大概只有0.02%，我当时就觉得这道题绝壁有坑，我打算跳过这题的时候，看了一下我们队的分值还没到800，这可咋办，没到800分就没有进阶奖励，我硬着头皮准备把这道20分的题混个十多分，是字符串处理的题，我是用java写的，因为java处理字符串我比较熟悉，坑点很多，我大概提交了五六遍都只拿到一分，我打算放弃的时候，想了想，再试最后几次把，这道题没分的话，后面做了也没有用，仔细分析了下样例特殊情况，最终拿到了11分（花了好长时间┭┮﹏┭┮），立马转战L2。</p><p>L2-1读完感觉应该不会卡时间，暴力加set后直接拿了25分，有些意外，看了下L2-3应该是道广搜题，简单想了下思路，应该是要vetor建立图，我好久没做这种题，时间也不允许了，就放弃了，L2-4题目很长，看了一遍发现是道水题，用栈混了19分，可能特殊情况没考虑全。时间也差不多结束了，就没再做了，看了看排名，团队拿了1080分，我个人拿了133分。后续大家说能拿二等奖，(^o^)/~，还挺开心的</p><p>这次天梯赛感悟很多，期间团队也经历了很多很多波折，团队发展至今不易，很多时候都是雷老师一人在支撑这个团队，其实我个人觉得编程能力只是很小的一部分，想提升自己，光靠技术是行不通的，应该多多关注其他方面的能力，多多在团队里说话，听雷老师的教诲，这些比技术来说更加可贵。</p><p>希望团队以后发展越来越好，学弟学妹们能扛起大旗，在下一届比赛创造更好的成绩。</p><p><img src="http://ww1.sinaimg.cn/large/006PpBLogy1g1lu0o57tsj30u0140x6p.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从寒假开始，我很少碰竞赛相关的题目了，感觉已经没有了以前的热情，直到dxl在群里提出参加天梯赛一事时，团体提出了搞天梯赛，一开始我是不想去的，感觉自己退步了很多，不想再参与之类的竞赛。但回头想想蓝桥杯也是需要刷题的，训练一下算法，对两个比赛都有好处。于是还是去尝试的参加了一
      
    
    </summary>
    
      <category term="感悟" scheme="http://yoursite.com/categories/%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="天梯赛" scheme="http://yoursite.com/tags/%E5%A4%A9%E6%A2%AF%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>用CSS画一个带阴影的三角形</title>
    <link href="http://yoursite.com/2019/03/04/%E7%94%A8CSS%E7%94%BB%E4%B8%80%E4%B8%AA%E5%B8%A6%E9%98%B4%E5%BD%B1%E7%9A%84%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
    <id>http://yoursite.com/2019/03/04/用CSS画一个带阴影的三角形/</id>
    <published>2019-03-04T05:40:09.000Z</published>
    <updated>2019-03-04T05:40:39.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h2><p>怎么用CSS画一个带阴影的三角形呢 ?<br>有童鞋说, 这还不简单吗<br>网上有很多解决方案, 但其实大多都是实现不太完美的, 存在一些问题</p><p>假设我们做一个向下的三角形箭头<br>常见的方法大致有两种</p><ol><li>通过边框控制, border-left和border-right设为透明, border-top设为预定的颜色即可</li><li>通过 transform 旋转盒子</li></ol><p>方法一可以画三角形, 但是画阴影是很难做到的(如果做到的朋友, 欢迎给我留言)</p><h2 id="2-设计"><a href="#2-设计" class="headerlink" title="2. 设计"></a>2. 设计</h2><h3 id="2-1-边框法"><a href="#2-1-边框法" class="headerlink" title="2.1 边框法"></a>2.1 边框法</h3><p><img src="https://user-gold-cdn.xitu.io/2019/3/4/169471eb1dd7ca74?w=1093&amp;h=589&amp;f=png&amp;s=13383" alt="在这里插入图片描述"><br>html结构<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>css样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff8605</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0, 0, 0, .2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">9px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">10px</span> solid <span class="number">#ff8605</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>缺点很明显, 我们不能通过box-shadow的方式来设置阴影, 阴影会是一个盒子</p><p>但如果不用设阴影, 只是需要边框的话, 我们可以再定义一个伪类元素, 覆盖到三角形的下面即可<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">10px</span> solid <span class="built_in">rgba</span>(0, 0, 0, .1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如图所示<br><img src="https://user-gold-cdn.xitu.io/2019/3/4/169471eb1e2f5234?w=1093&amp;h=600&amp;f=png&amp;s=14319" alt="在这里插入图片描述"></p><p>如果要求不严格似乎也够用了. 但作为一个严峻的前端工程师! 我们还是不能容忍这种实现方法, 下面我们看一看<code>tranform</code>方法是如何解决的</p><h3 id="2-2-transform方法"><a href="#2-2-transform方法" class="headerlink" title="2.2 transform方法"></a>2.2 transform方法</h3><p>这种方法的思路就是使用transform旋转盒子, 一半被上面的容器遮挡, 一半显示出来</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff8605</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(135deg);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> -<span class="number">2px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(0, 0, 0, .2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/3/4/169471eb1dc31729?w=1124&amp;h=607&amp;f=png&amp;s=16935" alt="在这里插入图片描述"></p><p><strong>我们似乎实现了我们想要的结果, 但是, 其实是存在一个问题的, 但因为我们的阴影面积不够大, 所以图片上看起来不明显</strong></p><p>当我们把<code>box-shadow</code>的阴影面积扩大时, 我们发现到问题的所在了</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/4/169471eb1e0b90d6?w=1103&amp;h=613&amp;f=png&amp;s=19913" alt="在这里插入图片描述"></p><p>盒子突出来了, 那怎么解决呢</p><p>我们再定义一个与容器颜色相同的盒子, 将上半部分盖住就可以啦.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* transform方法 */</span></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">45px</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff8605</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(135deg);</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> -<span class="number">2px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0, 0, 0, .2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#ff8605</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>要注意三角形应该用<code>before</code>定义, 覆盖的盒子应该用<code>after</code>定义, 这样盒子才能覆盖到三角形上面</p><p>实现效果:<br><img src="https://user-gold-cdn.xitu.io/2019/3/4/169471eb1e3d0784?w=1084&amp;h=625&amp;f=png&amp;s=17210" alt="在这里插入图片描述"></p><h2 id="3-最终解决方案代码"><a href="#3-最终解决方案代码" class="headerlink" title="3. 最终解决方案代码"></a>3. 最终解决方案代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS实现带阴影效果的三角形<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">                position: relative;</span></span><br><span class="line"><span class="undefined">                width: 200px;</span></span><br><span class="line"><span class="undefined">                height: 100px;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#ff8605</span>;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">box-shadow</span>: 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, <span class="selector-class">.2</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="undefined">                position: absolute;</span></span><br><span class="line"><span class="undefined">                bottom: -5px;</span></span><br><span class="line"><span class="undefined">                left: 45px;</span></span><br><span class="line"><span class="undefined">                content: '';</span></span><br><span class="line"><span class="undefined">                width: 10px;</span></span><br><span class="line"><span class="undefined">                height: 10px;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#ff8605</span>;</span></span><br><span class="line"><span class="undefined">                transform: rotate(135deg);</span></span><br><span class="line"><span class="css">                <span class="selector-tag">box-shadow</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">-2px</span> 5<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, <span class="selector-class">.2</span>);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="undefined">                position: absolute;</span></span><br><span class="line"><span class="undefined">                bottom: 0px;</span></span><br><span class="line"><span class="undefined">                left: 40px;</span></span><br><span class="line"><span class="undefined">                content: '';</span></span><br><span class="line"><span class="undefined">                width: 20px;</span></span><br><span class="line"><span class="undefined">                height: 20px;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">background</span>: <span class="selector-id">#ff8605</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你有更好的实现办法, 欢迎给我留言</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-思路&quot;&gt;&lt;a href=&quot;#1-思路&quot; class=&quot;headerlink&quot; title=&quot;1. 思路&quot;&gt;&lt;/a&gt;1. 思路&lt;/h2&gt;&lt;p&gt;怎么用CSS画一个带阴影的三角形呢 ?&lt;br&gt;有童鞋说, 这还不简单吗&lt;br&gt;网上有很多解决方案, 但其实大多都是实现不
      
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>写给自己看的React 笔记</title>
    <link href="http://yoursite.com/2019/03/02/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9C%8B%E7%9A%84React-%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/03/02/写给自己看的React-笔记/</id>
    <published>2019-03-02T08:27:59.000Z</published>
    <updated>2019-03-04T09:57:13.607Z</updated>
    
    <content type="html"><![CDATA[<p>写给自己看的React 笔记</p><h2 id="1-JSX-介绍"><a href="#1-JSX-介绍" class="headerlink" title="1. JSX 介绍"></a>1. JSX 介绍</h2><p>JSX 事实上是 JavaScript 语法的扩展</p><p>在JSX中可以写各种js表达式(变量, 函数, 运算等), 用大括号包起来<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> t = <span class="string">"哈利波特"</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &#123; t &#125;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>JSX 通过 Babel编译和React.js构造成 <strong>JavaScript对象结构</strong>, 再从 <strong>JavaScript对象</strong> 渲染成 <strong>DOM元素</strong></p><p>例如:<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">    &lt;h1 className=<span class="string">"greeting"</span>&gt;</span><br><span class="line">        Hello, world!</span><br><span class="line">    &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></p><p>Babel 转译器会把 JSX 转换成一个名为React.createElement() 的方法调用。</p><p>将被描述为<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="keyword">const</span> element = React.createElement(</span><br><span class="line">  type: <span class="string">'h1'</span>,</span><br><span class="line">  className: <span class="string">'greeting'</span>,</span><br><span class="line">  content: <span class="string">'Hello, world!'</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>React再将js对象转化为DOM元素</p><h2 id="2-组件和props"><a href="#2-组件和props" class="headerlink" title="2. 组件和props"></a>2. 组件和props</h2><p>props是React组件的输入, 它是从父组件向下传递给子组件的数据</p><p>看一个例子.<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Welcome = <span class="function"><span class="keyword">function</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Welcome name=<span class="string">"zmj"</span> /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>这个例子中发生了四个步骤</p><ol><li>我们通过<code>ReactDOM.render()</code>方法渲染了<code>&lt;Welcome name=&quot;zmj&quot; /&gt;</code>组件</li><li><strong>React 将 {name: ‘zmj’} 作为props传入Welcome组件</strong></li><li>Welcome组件将<code>&lt;h1&gt;Hello, zmj&lt;/h1&gt;</code>元素作为结果返回。</li><li>React DOM将DOM更新</li></ol><p>注意: <strong>props是只读的, 不能修改它</strong></p><p>补充一个属性<code>props.children</code><br>props.children在每个组件上都可用。 它会包含<strong>组件的开始和结束标记之间的内容</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;this.props.children&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;Welcome&gt;Hello world!<span class="xml"><span class="tag">&lt;/<span class="name">Welcome</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里的<code>this.props.children</code>就是<code>Hello, wolrd</code></p><p>其实也就等同于<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Welcome children=<span class="string">"Hello world"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">Welcome</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h2 id="3-state-和-生命周期"><a href="#3-state-和-生命周期" class="headerlink" title="3. state 和 生命周期"></a>3. state 和 生命周期</h2><p>state和props很相似, 但state是私有的, 受控于当前组件</p><p>生命周期<br><img src="http://ww1.sinaimg.cn/large/006PpBLogy1g0qpl495xnj30va0hqtb5.jpg" alt></p><h3 id="3-1-一个例子"><a href="#3-1-一个例子" class="headerlink" title="3.1 一个例子"></a>3.1 一个例子</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123; <span class="attr">data</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">this</span>.timerID = setInterval(<span class="keyword">this</span>.tick.bind(<span class="keyword">this</span>), <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>.timerID)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tick() &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            data: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;时钟的时间如下:<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">                &lt;h2&gt;It is &#123;<span class="keyword">this</span>.state.data.toLocaleTimeString()&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span>, document.getElementById('root'))</span></span><br></pre></td></tr></table></figure><p>构造函数中super是必须的, super()代表调用父类的构造函数(React.Component)</p><p>这个例子的经历的流程</p><ol><li>当 <code>&lt;Clock /&gt;</code> 被传递给 <code>ReactDOM.render()</code> 时，React 调用 <code>Clock</code> 组件的构造函数. 初始化了this.state</li><li>React 调用 render()方法. </li><li>当 Clock 的输出插入到 DOM 中时, React 调用 componentDidMount() 生命周期钩子, Clock 组件要求浏览器设置一个定时器，每秒钟调用一次 tick().</li><li>调用tick(), 通过使用setState来调度UI更新.</li><li>一旦Clock组件从DOM中被移除, React会调用<code>componentWillUnmount()</code>这个钩子函数, 定时器被清除</li></ol><h3 id="3-2-正确的使用状态"><a href="#3-2-正确的使用状态" class="headerlink" title="3.2 正确的使用状态"></a>3.2 正确的使用状态</h3><p>关于setState()有三件事很重要</p><h4 id="3-2-1-不要直接更新状态"><a href="#3-2-1-不要直接更新状态" class="headerlink" title="3.2.1 不要直接更新状态"></a>3.2.1 不要直接更新状态</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wrong</span></span><br><span class="line"><span class="keyword">this</span>.state.comment = <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><p>应该使用setState()更新, 只有构造函数中是唯一能够初始化state的地方</p><h4 id="3-2-2-setState-可能是异步的"><a href="#3-2-2-setState-可能是异步的" class="headerlink" title="3.2.2 setState()可能是异步的"></a>3.2.2 setState()可能是异步的</h4><p>React 可以将多个setState() 调用合并成一个调用来提高性能。</p><p>因为 this.props 和 this.state 可能是异步更新的，你不应该依靠它们的值来计算下一个状态。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Wrong</span></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  counter: <span class="keyword">this</span>.state.counter + <span class="keyword">this</span>.props.increment,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// correct</span></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState, props</span>) =&gt;</span> (&#123;</span><br><span class="line">  counter: prevState.counter + props.increment</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h4 id="3-2-3-状态更新合并"><a href="#3-2-3-状态更新合并" class="headerlink" title="3.2.3 状态更新合并"></a>3.2.3 状态更新合并</h4><p>当你调用 setState() 时，React 将你提供的对象合并到当前状态。</p><p>意思就是如果state保存了多个键值对.<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.state = &#123;</span><br><span class="line">    posts: [],</span><br><span class="line">    comments: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以单独更新一个值, React会自动合并到当前状态<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    comments: [<span class="string">'hello'</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="4-列表-amp-keys"><a href="#4-列表-amp-keys" class="headerlink" title="4. 列表 &amp; keys"></a>4. 列表 &amp; keys</h2><p>在渲染一段列表元素的时候, 最好使用map方法<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;渲染列表&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">            &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">                &#123;[1, 2, 3, 4, 5].map(val =&gt; &#123;</span></span><br><span class="line"><span class="regexp">                    return &lt;li&gt;&#123;val&#125;&lt;/</span>li&gt;</span><br><span class="line">                &#125;)&#125;</span><br><span class="line">            &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>控制窗会弹出警告<code>Each child in a list should have a unique &quot;key&quot; prop.</code><br>意思是当你创建一个元素的时候, 必须包含一个唯一的key值</p><p>这里临时用数组的下标当了key值, 不推荐这样做, key值必须是唯一的<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].map(<span class="function">(<span class="params">val, index</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;val&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&#125;)&#125;</span><br></pre></td></tr></table></figure></p><p>为什么要给列表元素加上key值并且要唯一呢?</p><p>这就要了解到React的渲染策略. diff算法</p><p>首先看一个例子<br>我们将列表集合<code>[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;]</code>更新成<code>[&#39;B&#39;, &#39;A&#39;, &#39;D&#39;, &#39;C&#39;]</code><br>如果你不加key, 更新的办法是逐个比较差异</p><ul><li>B != A, 于是 B 节点被重新创建渲染</li><li>A != B, 于是 A 节点被重新创建渲染</li><li>D != C, 于是 C 节点被重新创建渲染</li><li>C != D, 于是 D 节点被重新创建渲染<br><img src="https://pic2.zhimg.com/80/7541670c089b84c59b84e9438e92a8e9_hd.png" alt></li></ul><p>可是我们的节点仅仅是交换了位置, 结果却被全部重新创建渲染了一遍, 大大影响了性能.</p><p>React给出的解决方案是给集合元素加上key</p><p>如图所示:<br><img src="https://pic4.zhimg.com/80/c0aa97d996de5e7f1069e97ca3accfeb_hd.png" alt></p><p>我们给每个节点加上了唯一的key.</p><p>React通过key发现, 新老集合中的节点都是相同的, 于是只进行了移动操作, 得到了新的集合, 大大提高了性能.</p><p>总言之, 给元素加上唯一的key利于React的性能提升, 这是一件必须得事情.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写给自己看的React 笔记&lt;/p&gt;
&lt;h2 id=&quot;1-JSX-介绍&quot;&gt;&lt;a href=&quot;#1-JSX-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. JSX 介绍&quot;&gt;&lt;/a&gt;1. JSX 介绍&lt;/h2&gt;&lt;p&gt;JSX 事实上是 JavaScript 语法
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>浅析React中的虚拟DOM和diff算法</title>
    <link href="http://yoursite.com/2019/03/02/React%E4%B8%AD%E7%9A%84%E8%99%9A%E6%8B%9FDOM%E5%92%8Cdiff%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/02/React中的虚拟DOM和diff算法/</id>
    <published>2019-03-02T07:38:37.000Z</published>
    <updated>2019-03-02T07:39:12.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><p>React原理</p><p>我们来想一下如何实现React</p><p>第一种方案：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> state 数据</span><br><span class="line"><span class="number">2.</span> JSX 模板</span><br><span class="line"><span class="number">3.</span> 数据 + 模板 结合, 生成真实的DOM, 来显示</span><br><span class="line"><span class="number">4.</span> state 发生改变</span><br><span class="line"><span class="number">5.</span> 数据 + 模板 结合, 生成真实的DOM, 替换原始的DOM</span><br></pre></td></tr></table></figure></p><p>但这种方案在第五步有着很大的性能缺陷<br>用新生成的DOM去替换原始的DOM, 非常消耗性能</p><p>第二种方案<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> state 数据</span><br><span class="line"><span class="number">2.</span> JSX 模板</span><br><span class="line"><span class="number">3.</span> 数据 + 模板 结合, 生成真实的DOM, 来显示</span><br><span class="line"><span class="number">4.</span> state 发生改变</span><br><span class="line"><span class="number">5.</span> 数据 + 模板 结合, 生成真实的DOM, 并不直接替换原始的DOM</span><br><span class="line"><span class="number">6.</span> 新的DOM (DocumentFragment) 和原始的DOM 做比对，找差异</span><br><span class="line"><span class="number">7.</span> 找出有差异的DOM元素</span><br><span class="line"><span class="number">8.</span> 将有差异的DOM元素替换掉旧的DOM元素</span><br></pre></td></tr></table></figure></p><p>这种方案同样存在缺陷<br>关键在于第六步，我们找新DOM和原始DOM的比对找差异过程中，也很消耗性能，性能提升并不明显</p><p>第三种方案：虚拟DOM</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> state 数据</span><br><span class="line"><span class="number">2.</span> JSX 模板</span><br><span class="line"><span class="number">3.</span> 生成虚拟DOM(JS对象), 用js对象描述dom信息</span><br><span class="line">    &#123;</span><br><span class="line">        tag: <span class="string">'div'</span>,</span><br><span class="line">        attrs: &#123;<span class="attr">id</span>: <span class="string">'root'</span>&#125;,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                tag: <span class="string">'p'</span>,</span><br><span class="line">                children: [<span class="string">'hello, world'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"><span class="number">4.</span> 借助虚拟DOM, 生成真实的DOM, 来显示</span><br><span class="line">    &lt;div id=<span class="string">'root'</span>&gt;&lt;p&gt;hello, world&lt;/p&gt;&lt;/div&gt;</span><br><span class="line"><span class="number">5.</span> state 发生改变</span><br><span class="line"><span class="number">6.</span> 生成新的虚拟DOM</span><br><span class="line"><span class="number">7.</span> 比较原始虚拟DOM和新的虚拟DOM的差异</span><br><span class="line"><span class="number">8.</span> 直接操作DOM，改变有差异的内容</span><br></pre></td></tr></table></figure><p>优点：生成 js 对象很快, 所以在两个js对象中找差异 损耗性能很小<br>极大的提升了性能</p><h2 id="diff算法"><a href="#diff算法" class="headerlink" title="diff算法"></a>diff算法</h2><p>diff算法用于比较虚拟dom之间的差异</p><h3 id="1-逐级比较"><a href="#1-逐级比较" class="headerlink" title="1. 逐级比较"></a>1. 逐级比较</h3><p>diff算法通过逐级的去比较两颗节点树的差异，大大降低了复杂性<br><img src="https://user-gold-cdn.xitu.io/2017/11/3/7825c29127bf2cf4287780d644da88ec?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p><h3 id="2-列表List"><a href="#2-列表List" class="headerlink" title="2. 列表List"></a>2. 列表List</h3><p>假设我们有一个组件，它在一个迭代中渲染了5个组件，而下一次渲染的时候在组件列表的中间插入一个新的组件。 只是通过这个信息真的很难知道如何在两个组件列表之间进行映射。<br>默认情况下，React将先前列表的第一个组件与下一个列表的第一个组件相关联，等等。您可以提供一个Key属性，以帮助React去找到他们的映射关系。 在实际中，这通常很容易把刚刚插入的组件从他们当中找出来。</p><p><img src="https://user-gold-cdn.xitu.io/2017/11/3/364a3aff44c097ca7061747ce829f04c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;虚拟DOM&quot;&gt;&lt;a href=&quot;#虚拟DOM&quot; class=&quot;headerlink&quot; title=&quot;虚拟DOM&quot;&gt;&lt;/a&gt;虚拟DOM&lt;/h2&gt;&lt;p&gt;React原理&lt;/p&gt;
&lt;p&gt;我们来想一下如何实现React&lt;/p&gt;
&lt;p&gt;第一种方案：&lt;br&gt;&lt;figure cl
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="虚拟DOM" scheme="http://yoursite.com/tags/%E8%99%9A%E6%8B%9FDOM/"/>
    
      <category term="diff" scheme="http://yoursite.com/tags/diff/"/>
    
  </entry>
  
  <entry>
    <title>从ES5的角度看ES6中的class</title>
    <link href="http://yoursite.com/2019/03/02/%E4%BB%8EES5%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8BES6%E4%B8%AD%E7%9A%84class/"/>
    <id>http://yoursite.com/2019/03/02/从ES5的角度看ES6中的class/</id>
    <published>2019-03-02T07:37:16.000Z</published>
    <updated>2019-03-02T07:38:08.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ES6的 class 是语法糖, 相当好用, 主要介绍几个关键的概念</p><ol><li>仿类结构</li><li>类的声明</li><li>静态成员</li><li>类的继承</li></ol><h2 id="1-ES5-中的仿类结构"><a href="#1-ES5-中的仿类结构" class="headerlink" title="1. ES5 中的仿类结构"></a>1. ES5 中的仿类结构</h2><p>在ES6之前没有class语法, 我们仿写一个类结构<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zmj'</span>)</span><br><span class="line">p.sayName()</span><br></pre></td></tr></table></figure></p><p><code>Person</code>是一个构造函数, sayName()方法被指派到原型上, 因此<code>Person</code>的所有实例都共享了sayName方法</p><h2 id="2-ES6-类的声明"><a href="#2-ES6-类的声明" class="headerlink" title="2. ES6 类的声明"></a>2. ES6 类的声明</h2><p>将上例改写成类<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 相当于 Person 的构造函数, 私有属性应该写在这里</span></span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相当于Person.prototype.sayName</span></span><br><span class="line">    sayName() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zmj'</span>)</span><br><span class="line">p.sayName()</span><br></pre></td></tr></table></figure></p><p>与ES5写法的区别:</p><ol><li>类声明不会被提升, 与 let 相似</li><li>所有代码都处于严格模式</li><li>不可枚举</li></ol><p>其实上面的类结构等价于下面的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span></span><br><span class="line">    <span class="keyword">const</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">'sayName'</span>, &#123;</span><br><span class="line">        value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">        &#125;,</span><br><span class="line">        enumerable: <span class="literal">false</span>,</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Person</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'zmj'</span>)</span><br><span class="line">p.sayName()</span><br></pre></td></tr></table></figure></p><h2 id="3-静态成员"><a href="#3-静态成员" class="headerlink" title="3. 静态成员"></a>3. 静态成员</h2><p>首先要理解静态成员的含义.</p><p>静态成员是类所有的, 不需要创建实例就可以调用(通过类名直接调用)</p><p>在ES5中的例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.create = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = Person.create(<span class="string">'zmj'</span>)</span><br><span class="line">p.sayName()</span><br></pre></td></tr></table></figure></p><p><code>Person.create</code>就是所谓的静态方法. 它的数据不依赖任何类的实例</p><p>可以直接通过类名.方法名直接调用, 不需要new一个新的实例</p><p>在ES6中简化了该操作, 只要在方法名上加上static即可.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> create(name) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-继承"><a href="#4-继承" class="headerlink" title="4. 继承"></a>4. 继承</h2><p>在ES5中, 实现继承是一个很麻烦的事情.</p><p>实现一个继承, 父类是一个矩形类, 子类是正方形类<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Reactangle</span>(<span class="params">length, width</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.length = length</span><br><span class="line">    <span class="keyword">this</span>.width = width</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Reactangle.prototype.getArea = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length * <span class="keyword">this</span>.width</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Square</span>(<span class="params">length</span>) </span>&#123;</span><br><span class="line">    Reactangle.call(<span class="keyword">this</span>, length, length)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Square.prototype = <span class="built_in">Object</span>.create(Reactangle.prototype, &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: &#123;</span><br><span class="line">        value: Square,</span><br><span class="line">        enumerable: <span class="literal">true</span>,</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> square = <span class="keyword">new</span> Square(<span class="number">3</span>)</span><br><span class="line">square.getArea()</span><br></pre></td></tr></table></figure></p><p>必须用<code>Object.create</code> 关联子类和父类的原型, 并且在子类的构造方法中还要使用<code>Reactangle.call()</code>方法</p><p>用ES6重写<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(length, width) &#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length</span><br><span class="line">        <span class="keyword">this</span>.width = width</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getArea() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.length * <span class="keyword">this</span>.width</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(length) &#123;</span><br><span class="line">        <span class="comment">// 与 Rectangle.call(this, length, length) 相同</span></span><br><span class="line">        <span class="keyword">super</span>(length, length)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> square = <span class="keyword">new</span> Square(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;ES6的 class 是语法糖, 相当好用, 主要介绍几个关键的概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;仿类结构&lt;/li&gt;
&lt;li&gt;类的声明&lt;/li
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>实现左侧固定宽度, 右侧自适应的两栏布局常见方法</title>
    <link href="http://yoursite.com/2019/02/27/%E5%AE%9E%E7%8E%B0%E5%B7%A6%E4%BE%A7%E5%9B%BA%E5%AE%9A%E5%AE%BD%E5%BA%A6-%E5%8F%B3%E4%BE%A7%E8%87%AA%E9%80%82%E5%BA%94%E7%9A%84%E4%B8%A4%E6%A0%8F%E5%B8%83%E5%B1%80%E5%B8%B8%E8%A7%81%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/27/实现左侧固定宽度-右侧自适应的两栏布局常见方法/</id>
    <published>2019-02-27T05:22:08.000Z</published>
    <updated>2019-02-27T05:22:52.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两栏布局方案"><a href="#两栏布局方案" class="headerlink" title="两栏布局方案"></a>两栏布局方案</h2><p>实现左侧固定, 右侧自适应的布局方案, 常见的几种, 写了一个各个方案实现效果的Demo, 可以通过这里查看: <a href="https://zzzmj.github.io/demo/two-column-layout/index.html" target="_blank" rel="noopener">预览</a></p><p>首先统一html结构<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是左边的盒子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是右边的盒子<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后统一样式, 左侧固定宽度<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="number">#dedede</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#2DB3E4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#F37EC1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="1-双float方案"><a href="#1-双float方案" class="headerlink" title="1. 双float方案"></a>1. 双float方案</h2><p>利用CSS的<code>calc()</code>函数来计算右侧宽度值, 需要清除父容器的浮动</p><p>设置<code>box-sizing: border-box;</code>是为了方便计算<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 120px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-float-margin-left方案"><a href="#2-float-margin-left方案" class="headerlink" title="2. float + margin-left方案"></a>2. float + margin-left方案</h2><p><code>block</code>的元素盒子的宽度具有填满父容器，并随着父容器的宽度自适应的流动特性。</p><p>并且 block元素和浮动元素并排时, block元素会忽视浮动元素</p><p>因此给左侧盒子浮动, 右侧设置margin-left保持距离即可<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-absolute-margin-left"><a href="#3-absolute-margin-left" class="headerlink" title="3. absolute + margin-left"></a>3. absolute + margin-left</h2><p>与方案2原理大致相同, absolute也是会脱离文档流</p><p>不用清除浮动, 但也带来了新的问题</p><ol><li>父容器需要改变position</li><li>如果左侧盒子比右侧盒子高度, 那么左侧盒子会超出父容器高度</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">120px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-float-BFC-方法"><a href="#4-float-BFC-方法" class="headerlink" title="4. float + BFC 方法"></a>4. float + BFC 方法</h2><p>这种方法不用计算宽度,<br>原理是<strong>BFC可以阻止元素被浮动元素覆盖</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>父容器需要清除浮动, 右侧盒子设置了<code>overflow: auto;</code>形成了BFC</p><h2 id="5-flex方案"><a href="#5-flex方案" class="headerlink" title="5. flex方案"></a>5. flex方案</h2><p>flex可以说是最好的方案了</p><p>直接给右侧盒子设置<code>flex: 1</code>, 即可自动填满宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;两栏布局方案&quot;&gt;&lt;a href=&quot;#两栏布局方案&quot; class=&quot;headerlink&quot; title=&quot;两栏布局方案&quot;&gt;&lt;/a&gt;两栏布局方案&lt;/h2&gt;&lt;p&gt;实现左侧固定, 右侧自适应的布局方案, 常见的几种, 写了一个各个方案实现效果的Demo, 可以通过这里查看
      
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="布局" scheme="http://yoursite.com/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>puppeteer 安装踩坑记</title>
    <link href="http://yoursite.com/2019/02/22/puppeteer-%E5%AE%89%E8%A3%85%E8%B8%A9%E5%9D%91%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/22/puppeteer-安装踩坑记/</id>
    <published>2019-02-22T09:22:26.000Z</published>
    <updated>2019-02-22T09:37:22.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h2><p><code>puppeteer</code>是chrome官方开发的Node库</p><p>可以模拟浏览器操作</p><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><p>安装的时候遇到了问题</p><p>在执行下面这条安装命令的时候, 发现安装很长时间都成功不了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add puppeteer</span><br></pre></td></tr></table></figure></p><p>原因是: 安装<code>puppeteer</code>的时候, 它会下载最新的<code>Chromium</code>(需要翻墙才能下)</p><p>因此国内下载基本是下不了的</p><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h2><h3 id="2-1-跳过Chromium下载"><a href="#2-1-跳过Chromium下载" class="headerlink" title="2.1 跳过Chromium下载"></a>2.1 跳过<code>Chromium</code>下载</h3><p>官方给个解决方案是设置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUPPETEER_SKIP_CHROMIUM_DOWNLOAD - do not download bundled Chromium during installation step.</span><br></pre></td></tr></table></figure></p><p>因此我们只要把<code>PUPPETEER_SKIP_CHROMIUM_DOWNLOAD</code> 这个环境变量设为true 即可</p><p>运行下面的命令能成功安装<code>puppetter</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true yarn add puppeteer</span><br></pre></td></tr></table></figure></p><h3 id="2-2-下载Chromium"><a href="#2-2-下载Chromium" class="headerlink" title="2.2 下载Chromium"></a>2.2 下载<code>Chromium</code></h3><p>还是要下载<code>Chromium</code>才能运行<code>puppeteer</code><br>因此到淘宝的源里下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://npm.taobao.org/mirrors/chromium-browser-snapshots/</span><br></pre></td></tr></table></figure><p>值得一提是选择版本的问题, 该下载哪个<code>Chromium</code>版本?</p><p>此时只要打开项目中<code>node_modules</code>下的<code>puppeteer</code>包的<code>package.json</code><br>就能知道依赖的<code>Chromium</code>版本了</p><p>我的版本是<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"puppeteer": &#123;</span><br><span class="line">    "chromium_revision": "624492"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h2 id="3-运行puppteer-Demo"><a href="#3-运行puppteer-Demo" class="headerlink" title="3. 运行puppteer Demo"></a>3. 运行puppteer Demo</h2><p>指定<code>Chromium</code>路径下的<code>chrome.exe</code>, 在launch方法中添加路径即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">'puppeteer'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> path = resolve(__dirname, <span class="string">'../../chrome-win/chrome.exe'</span>)</span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123;</span><br><span class="line">        executablePath: path</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">    <span class="keyword">await</span> page.screenshot(&#123;<span class="attr">path</span>: <span class="string">'baidu.png'</span>&#125;)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Puppeteer&quot;&gt;&lt;a href=&quot;#Puppeteer&quot; class=&quot;headerlink&quot; title=&quot;Puppeteer&quot;&gt;&lt;/a&gt;Puppeteer&lt;/h2&gt;&lt;p&gt;&lt;code&gt;puppeteer&lt;/code&gt;是chrome官方开发的Node库&lt;/p
      
    
    </summary>
    
      <category term="node" scheme="http://yoursite.com/categories/node/"/>
    
    
      <category term="bug" scheme="http://yoursite.com/tags/bug/"/>
    
      <category term="puppeteer" scheme="http://yoursite.com/tags/puppeteer/"/>
    
  </entry>
  
  <entry>
    <title>CSS 清除浮动原理详解</title>
    <link href="http://yoursite.com/2019/02/18/CSS-%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E5%8E%9F%E7%90%86%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/02/18/CSS-清除浮动原理详解/</id>
    <published>2019-02-18T01:34:23.000Z</published>
    <updated>2019-02-18T01:34:48.980Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-清除浮动原理详解"><a href="#CSS-清除浮动原理详解" class="headerlink" title="CSS 清除浮动原理详解"></a>CSS 清除浮动原理详解</h2><h3 id="一-浮动float"><a href="#一-浮动float" class="headerlink" title="一. 浮动float"></a>一. 浮动float</h3><p>float属性的本质是用来实现文字环绕效果的。<br>它有一个很大的副作用：会导致父容器的高度坍塌</p><p>疑问：</p><ol><li>那么将父容器固定高度有用吗？<br>没用，因为只要浮动元素的区域超过了这个高度，依旧会出现环绕效果影响布局</li></ol><p>那么怎么解决这个问题呢？<br>清除浮动方法很多，但本质上只有两种方法</p><ol><li>使用<code>clear</code>清除浮动</li><li>形成<code>BFC</code></li></ol><h3 id="1-1-使用clear清除浮动"><a href="#1-1-使用clear清除浮动" class="headerlink" title="1.1 使用clear清除浮动"></a>1.1 使用clear清除浮动</h3><p><code>clear</code> 属性是 CSS 专门用来处理 <code>float</code>引起的高度坍塌问题</p><p>语法：</p><blockquote><p>clear: none | left | right | both </p></blockquote><p>使用<code>clear: both</code>就可以, <code>left</code>和<code>right</code>可以完全被替代</p><p>使用clear要注意的地方</p><ol><li>clear只会清除自身所在<strong>前面的</strong>元素的浮动</li><li>clear属性只作用在<strong>块级元素</strong>上</li></ol><p>因为clear只会清除前面元素的浮动，因此我们要在容器的最后面添加一个<strong>块级元素</strong>，并让该元素使用<code>clear: both</code>属性</p><p>最常见的做法就是在父容器身上使用<code>::after</code><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#container</span><span class="selector-pseudo">::after</span> &#123; </span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block; </span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为clear只作用在块级元素上, <code>::after</code>等伪元素都是内联的<br>所以我们要加上这两行<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">content</span>: "";</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br></pre></td></tr></table></figure></p><h3 id="1-2-使用BFC清除浮动"><a href="#1-2-使用BFC清除浮动" class="headerlink" title="1.2 使用BFC清除浮动"></a>1.2 使用BFC清除浮动</h3><p>BFC全称为 <code>block formatting context</code>, 中文为”块级格式化上下文”</p><blockquote><p>性质：如果一个元素触发了 BFC , 那么该元素会形成一个独立容器, 不会影响到外界元素<br>只要触发了 BFC , 元素就不会因为 float 引起高度坍塌</p></blockquote><p><strong>如何触发BFC</strong><br>以下规则只要满足任意一条，即可触发</p><ol><li><html>根元素</html></li><li>float 的值不为 none</li><li>overflow 的值为 auto、scroll 或 hidden</li><li>display 的值为 table-cell、table-caption 和 inline-block 中的任何一个</li><li>position 的值不为 relative 和 static</li></ol><p><strong>BFC的一些特性</strong></p><ol><li>计算BFC高度时，浮动元素也会参与计算(用来解决父元素高度塌陷问题）</li><li>是一个独立的容器，外面元素不会影响他里面的元素</li><li>BFC元素不会与浮动元素的盒子相互重叠（解决兄弟元素排版混乱问题）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS-清除浮动原理详解&quot;&gt;&lt;a href=&quot;#CSS-清除浮动原理详解&quot; class=&quot;headerlink&quot; title=&quot;CSS 清除浮动原理详解&quot;&gt;&lt;/a&gt;CSS 清除浮动原理详解&lt;/h2&gt;&lt;h3 id=&quot;一-浮动float&quot;&gt;&lt;a href=&quot;#一-浮动
      
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="float" scheme="http://yoursite.com/tags/float/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 模拟实现call和apply</title>
    <link href="http://yoursite.com/2019/01/27/JavaScript-%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E5%92%8Capply/"/>
    <id>http://yoursite.com/2019/01/27/JavaScript-模拟实现call和apply/</id>
    <published>2019-01-27T12:51:24.000Z</published>
    <updated>2019-01-27T13:13:14.847Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-call和apply区别"><a href="#1-call和apply区别" class="headerlink" title="1. call和apply区别"></a>1. call和apply区别</h2><div class="note info">            <h4 id="简单概论："><a href="#简单概论：" class="headerlink" title="简单概论："></a>简单概论：</h4><p>call 调用一个函数，并指定函数的this和参数列表<br>apply 调用一个函数，并指定函数的this和参数数组</p>          </div><p>call和apply的区别就是 <strong>一个接收参数列表，一个接收参数数组</strong></p><h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h2><p>由于两者区别不大，所以我们用call分析</p><p>例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'zmj'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayName.call(foo) <span class="comment">// 'zmj'</span></span><br></pre></td></tr></table></figure></p><p>这个例子中可以看出call做了两件事</p><ol><li>call改变了this的指向，指向了 foo</li><li>bar函数执行</li></ol><p>所以我们模拟实现的思路大致分为三步：</p><ol><li>把函数设为对象的属性</li><li>执行该函数</li><li>删除该函数</li></ol><h2 id="3-call实现"><a href="#3-call实现" class="headerlink" title="3. call实现"></a>3. call实现</h2><p>首先写出call的最简单版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line">    context.fn()</span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但我们还有情况没有考虑</p><ol><li>call的第一个参数可以为null</li><li>call可以给传参数</li><li>函数返回值</li></ol><p>因此继续优化<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.callES3 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> args = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        args.push(<span class="string">'arguments['</span> + i + <span class="string">']'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>)</span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为call后面的参数是不固定的，所以我们只能用<code>arguments</code>来获取</p><p>然后我们除去第一个参数，将剩余的参数保存到args数组中, 将参数拼接, 使用eval方法执行<br>然后接收返回值</p><p>使用ES6的扩展表达式能把实现写的更漂亮简洁些<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.callES6 = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">let</span> res = context.fn(...args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-apply实现"><a href="#4-apply实现" class="headerlink" title="4. apply实现"></a>4. apply实现</h2><p>apply实现原理与call相同</p><p>这里给出apply实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply ES3实现</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.applyES3 = <span class="function"><span class="keyword">function</span>(<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> res</span><br><span class="line">    <span class="keyword">if</span> (arr) &#123;</span><br><span class="line">        <span class="keyword">var</span> args = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">            args.push(<span class="string">'arr['</span> + i + <span class="string">']'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = context.fn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply ES6实现</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.applyES6 = <span class="function"><span class="keyword">function</span>(<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">    context = context || <span class="built_in">window</span></span><br><span class="line">    context.fn = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> res</span><br><span class="line">    <span class="keyword">if</span> (arr) &#123;</span><br><span class="line">        res = context.fn(...arr)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res = context.fn()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.fn</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-call和apply区别&quot;&gt;&lt;a href=&quot;#1-call和apply区别&quot; class=&quot;headerlink&quot; title=&quot;1. call和apply区别&quot;&gt;&lt;/a&gt;1. call和apply区别&lt;/h2&gt;&lt;div class=&quot;note info&quot;&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="call" scheme="http://yoursite.com/tags/call/"/>
    
      <category term="apply" scheme="http://yoursite.com/tags/apply/"/>
    
  </entry>
  
  <entry>
    <title>使用python爬取 ycxy-3000张证件照</title>
    <link href="http://yoursite.com/2019/01/24/%E4%BD%BF%E7%94%A8python%E7%88%AC%E5%8F%96-ycxy-3000%E5%BC%A0%E8%AF%81%E4%BB%B6%E7%85%A7/"/>
    <id>http://yoursite.com/2019/01/24/使用python爬取-ycxy-3000张证件照/</id>
    <published>2019-01-24T13:51:55.000Z</published>
    <updated>2019-02-18T04:01:47.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用python爬取-ycxy-3000张证件照"><a href="#使用python爬取-ycxy-3000张证件照" class="headerlink" title="使用python爬取 ycxy-3000张证件照"></a>使用python爬取 ycxy-3000张证件照</h2><h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>之前在查普通话成绩的时候，发现需要只名字和身份证就能查到用户的的证件照</p><p>在学校的网站上，学生信息经常会被公开，比如四六级考试，或者防护性做的比较差的教务管理系统，很容易就能拿到同学的信息，于是我用爬虫爬拿到了学校一部分同学的证件照</p><h3 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h3><ul><li>chrome</li><li>python 3</li><li>requests 网络库</li><li>os 本地存储</li><li>urllib.request 下载图片</li><li>json 临时存储数据</li><li>time 计算爬虫时间<br>普通话成绩查询网址：<a href="http://www.cltt.org/studentscore" target="_blank" rel="noopener">http://www.cltt.org/studentscore</a><h3 id="3-分析"><a href="#3-分析" class="headerlink" title="3. 分析"></a>3. 分析</h3></li></ul><p>打开F12开发者工具，观察到我们的表单数据通过<code>post</code>方式，提交给了<code>/StudentScore/ScoreResult</code></p><p><img src="https://img-blog.csdnimg.cn/2019012421262133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNzk5MDI4NzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开开发者工具的<code>NetWork</code>选项，我们模拟一次发送数据</p><p>找到了<code>ScoreResult</code><br><img src="https://img-blog.csdnimg.cn/20190124212919795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNzk5MDI4NzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们看到<code>post</code>请求提交了三个数据<code>name</code>, <code>stuID</code>, <code>idCard</code><br>于是我们就可以使用requests 来模拟发送post请求了</p><p>然后分析html结构，发现图片在类名为<code>user-img</code>的span标签的子结点下<br><img src="https://img-blog.csdnimg.cn/20190124213548481.png" alt="在这里插入图片描述"></p><h3 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h3><h4 id="4-1-爬取照片地址"><a href="#4-1-爬取照片地址" class="headerlink" title="4.1 爬取照片地址"></a>4.1 爬取照片地址</h4><p>首先，我已经通过爬虫拿到了学生的信息并保存到了本地<br>所以直接从本地读取<code>json</code>得到学生对象<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stu_list</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        stu_list = json.load(f)</span><br><span class="line">    <span class="keyword">return</span> stu_list</span><br></pre></td></tr></table></figure></p><p>然后请求网站得到照片的地址，做了一些异常处理，因为有些同学可能没有去参加这个考试~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_image_url</span><span class="params">(name, id)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> name <span class="keyword">or</span> <span class="keyword">not</span> id:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    url = <span class="string">'http://www.cltt.org/StudentScore/ScoreResult'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span></span><br><span class="line">                      <span class="string">'Chrome/71.0.3578.98 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'name'</span>: name,</span><br><span class="line">        <span class="string">'idCard'</span>: id</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = requests.post(url, data=data, headers=headers).text</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError:</span><br><span class="line">        print(name + <span class="string">'查询异常'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    doc = PyQuery(res)</span><br><span class="line">    img_src = doc(<span class="string">'.user-img'</span>).find(<span class="string">'img'</span>).attr(<span class="string">'src'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> img_src:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> img_src</span><br></pre></td></tr></table></figure><p>然后通过学生数组，循环调用<code>get_image_url</code>，我们就可以拿到所有的照片地址</p><h4 id="4-2-给图片分类保存到本地"><a href="#4-2-给图片分类保存到本地" class="headerlink" title="4.2 给图片分类保存到本地"></a>4.2 给图片分类保存到本地</h4><p>拿到照片地址之后，我们使用<code>urlretrieve</code>方法来下载图片</p><p>使用<code>os.markdirs</code>方法来创建文件夹并给图片分类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_stu_list</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        stu_list = json.load(f)</span><br><span class="line">    <span class="keyword">for</span> stu <span class="keyword">in</span> stu_list:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> stu[<span class="string">'img'</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        college = stu[<span class="string">'college'</span>]</span><br><span class="line">        stu_class = stu[<span class="string">'class'</span>]</span><br><span class="line">        directory = college + <span class="string">'/'</span> + stu_class</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">            os.makedirs(directory)</span><br><span class="line">        filename = <span class="string">'&#123;&#125;/&#123;&#125;/&#123;&#125;.jpeg'</span>.format(college, stu_class, stu[<span class="string">'name'</span>])</span><br><span class="line">        urlretrieve(stu[<span class="string">'img'</span>], filename=filename)</span><br><span class="line">    <span class="keyword">return</span> stu_list</span><br></pre></td></tr></table></figure><h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>图片分两级目录，第一级是学院，第二级是班级<br>学院目录：<br><img src="https://img-blog.csdnimg.cn/20190124214618496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNzk5MDI4NzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>班级目录：<br><img src="https://img-blog.csdnimg.cn/20190124214757734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNzk5MDI4NzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>其中一个班级：<br><img src="https://img-blog.csdnimg.cn/20190124214924818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNzk5MDI4NzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>爬取3164张照片一共花费了约20分钟<img src="https://img-blog.csdnimg.cn/20190124214513208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxNzk5MDI4NzA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>github：<a href="https://github.com/zzzmj/photo-crawler" target="_blank" rel="noopener">https://github.com/zzzmj/photo-crawler</a><br><strong>撒花，感谢你的观看，点个Star吧，Thanks♪(･ω･)ﾉ</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用python爬取-ycxy-3000张证件照&quot;&gt;&lt;a href=&quot;#使用python爬取-ycxy-3000张证件照&quot; class=&quot;headerlink&quot; title=&quot;使用python爬取 ycxy-3000张证件照&quot;&gt;&lt;/a&gt;使用python爬取 ycx
      
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>欧拉函数及其计算</title>
    <link href="http://yoursite.com/2019/01/22/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E8%AE%A1%E7%AE%97/"/>
    <id>http://yoursite.com/2019/01/22/欧拉函数及其计算/</id>
    <published>2019-01-22T13:11:29.000Z</published>
    <updated>2019-01-22T13:11:44.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h2><h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h2><p>什么是欧拉函数？</p><blockquote><p> 任意给定正整数n，请问在小于等于n的正整数之中，有多少个与n构成互质关系？（比如，在1到8之中，有多少个数与8构成互质关系？）</p></blockquote><p>计算这个值的方法就叫做欧拉函数，用<code>φ(n)</code>表示。在1到8之中，与8形成互质关系的是1、3、5、7，所以 <code>φ(n)</code> = 4。</p><h2 id="2-计算"><a href="#2-计算" class="headerlink" title="2. 计算"></a>2. 计算</h2><p>欧拉函数计算公式<br><img src="https://box.kancloud.cn/2015-08-04_55c058b16129e.png" alt><br>这个p是什么呢？</p><p>一个正整数 n 可以通过分解质因数得到<br><img src="https://box.kancloud.cn/2015-08-04_55c057f99f735.png" alt><br>例如<code>n = 100</code>我们就可以写成 <code>100 = 2^2 + 5^2</code></p><p>欧拉值 <code>φ(n) = 100 * (1- 1/2) * (1 - 1/5)</code>  </p><p>那么知道了这个公式，我们怎么去计算呢</p><p>大致的几步<br>找到因子<br>将把<code>(1- 1/p)</code>转换为<code>(p - 1) / p</code><br>然后把相同的因子筛去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">euler</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i*i &lt;= ans; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;   </span><br><span class="line">            ans = ans / i * (i<span class="number">-1</span>);</span><br><span class="line">            <span class="comment">// 将相同的因子除去</span></span><br><span class="line">            <span class="keyword">while</span> (n % i == <span class="number">0</span>) &#123;</span><br><span class="line">                n /= i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        ans = ans / n * (n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于本文主要目的是讲如何计算，欧拉函数公式的推导过程可以参考维基百科：<a href="https://zh.wikipedia.org/wiki/%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">欧拉函数</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;欧拉函数&quot;&gt;&lt;a href=&quot;#欧拉函数&quot; class=&quot;headerlink&quot; title=&quot;欧拉函数&quot;&gt;&lt;/a&gt;欧拉函数&lt;/h2&gt;&lt;h2 id=&quot;1-定义&quot;&gt;&lt;a href=&quot;#1-定义&quot; class=&quot;headerlink&quot; title=&quot;1. 定义&quot;&gt;&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS中typeof和instanceof的区别</title>
    <link href="http://yoursite.com/2019/01/10/JS%E4%B8%ADtypeof%E5%92%8Cinstanceof%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/01/10/JS中typeof和instanceof的区别/</id>
    <published>2019-01-10T09:00:09.000Z</published>
    <updated>2019-01-10T09:00:32.102Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h2><p><code>typeof</code>运算符用来检测<strong>基本数据类型</strong><br>使用方法：<code>typeof opera</code>或者<code>typeof(operand)</code></p><p><code>instanceof</code>运算符用来检测对象类型（引用类型）<br>准确些可以说：来判断某个对象是否是某个类的一个实例<br>是则返回<code>true</code>，否则返回<code>false</code><br>使用方法：<code>variable instanceof constructor</code></p><h2 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1. 基本数据类型"></a>1. 基本数据类型</h2><p><code>typeof</code>用来检测五种基本数据类型</p><ul><li>string</li><li>number</li><li>boolean</li><li>null</li><li>undefined</li></ul><p><strong>typeof检测null会返回object，这是语言本身的一个bug，因为null本身属于基本类型</strong></p><p>一般不推荐使用<code>typeof</code>来检测引用类型</p><p>检测函数对象时会返回<code>function</code>其他对象时均返回<code>object</code></p><h2 id="2-内置对象"><a href="#2-内置对象" class="headerlink" title="2. 内置对象"></a>2. 内置对象</h2><p>常见的内置对象</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Object</li><li>Function</li><li>Array</li><li>Date</li><li>RegExp</li></ul><p>如果变量是给定引用类型的实例，那么<code>instanceof</code>操作符就会返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = []</span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">Array</span> <span class="comment">// 变量a是Array类型吗?</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;</span><br><span class="line">b <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// 变量b是Object类型吗?</span></span><br></pre></td></tr></table></figure><p>如果使用<code>instanceof</code>检测基本类型，那么操作符始终返回false，因为基本类型不是对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'zmj'</span></span><br><span class="line">a <span class="keyword">instanceof</span> <span class="built_in">Number</span> <span class="comment">// false</span></span><br><span class="line">b <span class="keyword">instanceof</span> <span class="built_in">String</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>参考资料：<br><a href="https://book.douban.com/subject/26351021/" target="_blank" rel="noopener">你不知道的JavaScript(上卷)</a></p><p><a href="https://book.douban.com/subject/10546125/" target="_blank" rel="noopener">JavaScript高级程序设计（第3版）</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof" target="_blank" rel="noopener">typeof | MDN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;区别：&quot;&gt;&lt;a href=&quot;#区别：&quot; class=&quot;headerlink&quot; title=&quot;区别：&quot;&gt;&lt;/a&gt;区别：&lt;/h2&gt;&lt;p&gt;&lt;code&gt;typeof&lt;/code&gt;运算符用来检测&lt;strong&gt;基本数据类型&lt;/strong&gt;&lt;br&gt;使用方法：&lt;code&gt;ty
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript函数中this的四种绑定策略</title>
    <link href="http://yoursite.com/2019/01/01/JavaScript%E5%87%BD%E6%95%B0%E4%B8%ADthis%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%BB%91%E5%AE%9A%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2019/01/01/JavaScript函数中this的四种绑定策略/</id>
    <published>2019-01-01T06:44:36.000Z</published>
    <updated>2019-01-01T10:03:24.796Z</updated>
    
    <content type="html"><![CDATA[<h2 id="this的四种绑定策略"><a href="#this的四种绑定策略" class="headerlink" title="this的四种绑定策略"></a>this的四种绑定策略</h2><ul><li>默认绑定</li><li>隐式绑定</li><li>显示绑定</li><li>new绑定</li></ul><h3 id="1-默认绑定"><a href="#1-默认绑定" class="headerlink" title="1. 默认绑定"></a>1. 默认绑定</h3><p>当一个函数没有明确的<strong>调用对象</strong>的时候，也就是单纯作为独立函数调用的时候，将对函数的this使用默认绑定：绑定到全局的window对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个例子</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">foo() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二个迷惑性的例子</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span></span><br><span class="line">    <span class="keyword">var</span> inner = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;</span><br><span class="line">    inner()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span></span><br><span class="line">foo() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>第二个例子虽然在foo()作用域内声明了a变量为3, 但它并不是一个对象, 所以this最终还是会指向全局的window对象</p><h3 id="2-隐式绑定"><a href="#2-隐式绑定" class="headerlink" title="2. 隐式绑定"></a>2. 隐式绑定</h3><p>函数被调用时有上下文对象，那么this会绑定这个上下文对象</p><p>书上写的上下文对象意思很模糊, 觉得这里翻译的其实不太好</p><p>我感觉比较好的解释是：<strong>当函数被一个对象包含的时候, 我们称这个函数的this被隐式绑定到这个对象上了</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在一串对象属性引用链中, this绑定的是最内层的对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      obj2: &#123;</span><br><span class="line">           a: <span class="number">2</span>,</span><br><span class="line">           obj3: &#123;</span><br><span class="line">                a:<span class="number">3</span>,</span><br><span class="line">                getA: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)   </span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.obj2.obj3.getA();  <span class="comment">// 输出3</span></span><br></pre></td></tr></table></figure><h4 id="隐式丢失"><a href="#隐式丢失" class="headerlink" title="隐式丢失"></a>隐式丢失</h4><p>最常见的this绑定问题就是被隐式绑定的函数会丢失绑定对象, 也就是它会应用默认绑定, 把this绑定到全局对象或者undefined上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> bar = obj.foo </span><br><span class="line">bar() <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>像这个例子, obj对象把foo函数的引用传给bar的时候, 会丢失this对obj的绑定</p><p>回调函数同样也会丢失绑定<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">2</span>,</span><br><span class="line">    foo: foo,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line">setTimeout(obj.foo, <span class="number">100</span>) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p><p><strong>这种函数赋值的方式是无法将函数所绑定的this对象也传递过去的</strong></p><h3 id="3-显式绑定"><a href="#3-显式绑定" class="headerlink" title="3. 显式绑定"></a>3. 显式绑定</h3><p>显式绑定是通过<code>apply</code>或者<code>call</code>函数绑定的对象</p><p>如果你想传递函数并且把所绑定的this对象也传递过去, 那么就可以使用call()</p><p>fn.call(object)</p><ul><li>fn是你调用的函数</li><li>object是你希望绑定的对象</li><li>作用：即刻调用函数fn(), 调用时这个函数的this指向object</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.call(obj)</span><br></pre></td></tr></table></figure><p>这样做有个缺点, 每次调用都会依赖call</p><p>所以可以将它包装成函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo.call(obj)</span><br><span class="line">&#125;</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure></p><p>如果使用bind会更简单<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = foo.bind(obj)</span><br><span class="line">bar()</span><br></pre></td></tr></table></figure></p><p><strong>call和bind的区别是</strong>：在绑定this到对象参数的同时：</p><ol><li>call将立即执行该函数</li><li>bind不执行函数，只返回一个可供执行的函数</li></ol><h3 id="4-new绑定"><a href="#4-new绑定" class="headerlink" title="4. new绑定"></a>4. new绑定</h3><p>来new来调用函数，会自动执行下列操作</p><ol><li>创建一个全新的对象</li><li>这个新对象被执行[[prototype]]连接</li><li>这个新对象会绑定到函数调用的this</li><li>如果函数没有返回其他对象，那么new表达式中的函数调用会自动返回这个新对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bar = <span class="keyword">new</span> foo(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(bar.a) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="5-优先级"><a href="#5-优先级" class="headerlink" title="5. 优先级"></a>5. 优先级</h3><p><strong>new绑定 &gt; 显示绑定 &gt; 隐式绑定 &gt; 默认绑定</strong></p><p>默认绑定在严格模式下会绑定到undefined, 否则绑定到全局对象</p><p>参考资料：<br><a href="https://book.douban.com/subject/26351021/" target="_blank" rel="noopener">你不知道的JavaScript(上卷)</a><br><a href="http://www.cnblogs.com/penghuwan/p/7356210.html" target="_blank" rel="noopener">【javascript】函数中的this的四种绑定形式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;this的四种绑定策略&quot;&gt;&lt;a href=&quot;#this的四种绑定策略&quot; class=&quot;headerlink&quot; title=&quot;this的四种绑定策略&quot;&gt;&lt;/a&gt;this的四种绑定策略&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;默认绑定&lt;/li&gt;
&lt;li&gt;隐式绑定&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
      <category term="函数" scheme="http://yoursite.com/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>for 循环中的setTimeout(function(){})异步问题</title>
    <link href="http://yoursite.com/2018/12/20/for-%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84setTimeout-function-%E5%BC%82%E6%AD%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/12/20/for-循环中的setTimeout-function-异步问题/</id>
    <published>2018-12-20T11:12:44.000Z</published>
    <updated>2018-12-26T00:58:49.552Z</updated>
    
    <content type="html"><![CDATA[<p>阅读这段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>预期是分别输出数字1-5, 每秒1次，每次1个<br>结果却是每秒一次输出了5个6</p><h2 id="setTimeout的执行原理"><a href="#setTimeout的执行原理" class="headerlink" title="setTimeout的执行原理"></a>setTimeout的执行原理</h2><p>setTimeout()是一个异步方法, 传递一个函数，<br>延迟一段时候把该函数添加到队列当中，并不是立即执行,<br>而且必须等当前环境所有代码执行完以后, 才会运行</p><p>也就是说我们执行这个for循环的时候<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(fun(...), <span class="number">1000</span>)</span><br><span class="line">setTimeout(fun(...), <span class="number">2000</span>)</span><br><span class="line">setTimeout(fun(...), <span class="number">3000</span>)</span><br><span class="line">setTimeout(fun(...), <span class="number">4000</span>)</span><br><span class="line">setTimeout(fun(...), <span class="number">5000</span>)</span><br></pre></td></tr></table></figure></p><p>五个函数先进入了队列, 然后等for循环结束后再依次出队 (粗略理解, 实质上是回调函数)<br>for循环结束后, 此时i是等于6的, 所以每秒一次输出了5个6</p><p><strong>要注意到var定义的i实质上是全局变量</strong>, 等同于下面的代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="使用闭包"><a href="#使用闭包" class="headerlink" title="使用闭包"></a>使用闭包</h3><p>这个办法的原理是创建了闭包作用域, 每次循环会生成一个新的闭包作用域, 使得延迟函数回调可以访问到正确的值</p><p>注意, 闭包作用域里必须声明变量j, 如果是一个空的作用域, 那不会产生作用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(j);</span><br><span class="line">        &#125;, j*<span class="number">1000</span>)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用ES6中的let"><a href="#使用ES6中的let" class="headerlink" title="使用ES6中的let"></a>使用ES6中的let</h3><p>这个办法的原理是通过let来劫持块作用域, 注意, 这个变量i不只会声明一次, 每次迭代的时候都会声明i, 每次迭代后, i的值都会使用</p><p>上一个迭代的值来初始化这个变量, 形成一个块作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">timer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;, i*<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阅读这段代码&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="异步" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5/"/>
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>使用python 原生socket搭建简单服务器</title>
    <link href="http://yoursite.com/2018/12/07/%E4%BD%BF%E7%94%A8python-%E5%8E%9F%E7%94%9Fsocket%E6%90%AD%E5%BB%BA%E7%AE%80%E5%8D%95%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2018/12/07/使用python-原生socket搭建简单服务器/</id>
    <published>2018-12-07T08:37:19.000Z</published>
    <updated>2018-12-07T08:47:39.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用socket搭建简单的服务器"><a href="#使用socket搭建简单的服务器" class="headerlink" title="使用socket搭建简单的服务器"></a>使用socket搭建简单的服务器</h2><p>socket通信流程<br><img src="https://images2017.cnblogs.com/blog/1199740/201709/1199740-20170915104804953-3885330.png" alt></p><p>chrome浏览器模拟客户端, 访问该服务器, 显示文字和图片</p><p>其中值得注意的地方: 当我键入服务器地址访问时, chrome浏览器给服务器发送了<strong>四个http请求</strong></p><ul><li><p>请求1: 请求主页</p><blockquote><p>GET / HTTP/1.1<br>Host: localhost:3000</p></blockquote></li><li><p>请求2: 请求图片</p><blockquote><p>GET /doge.gif HTTP/1.1<br>Host: localhost:3000</p></blockquote></li><li><p>请求3：请求标签栏图标</p><blockquote><p>GET /favicon.ico HTTP/1.1<br>Host: localhost:3000</p></blockquote></li><li><p>请求4：空请求</p><p>  会导致程序报错, 需要捕获这个请求，因为会我写的responce_for_pat里没有响应空请求</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route_index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    主页的处理函数, 返回主页的响应</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    header = <span class="string">'HTTP/1.x 200 OK\r\nContent-Type: text/html\r\n'</span></span><br><span class="line">    body = <span class="string">'&lt;h1&gt;Hello World&lt;/h1&gt;&lt;img src="doge.gif"/&gt;'</span></span><br><span class="line">    r = header + <span class="string">'\r\n'</span> + body</span><br><span class="line">    <span class="keyword">return</span> r.encode(encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route_img</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    图片的处理函数, 读取图片并生成响应返回</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'doge.gif'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        header = <span class="string">b'HTTP/1.x 200 OK\r\nContent-Type: image/gif\r\n\r\n'</span></span><br><span class="line">        img = header + f.read()</span><br><span class="line">        <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">responce_for_path</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据 path 调用相应的处理函数</span></span><br><span class="line"><span class="string">    没有处理的 path 会返回 404</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    r = &#123;</span><br><span class="line">        <span class="string">'/'</span>: route_index,</span><br><span class="line">        <span class="string">'/doge.gif'</span>: route_img,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 这里得到的是一个函数体</span></span><br><span class="line">    responce = r.get(path)</span><br><span class="line">    <span class="keyword">return</span> responce()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(host=<span class="string">''</span>, port=<span class="number">3000</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    启动服务器</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 初始化socket</span></span><br><span class="line">    <span class="keyword">with</span> socket.socket() <span class="keyword">as</span> s:</span><br><span class="line">        s.bind((host, port))</span><br><span class="line">        <span class="comment"># 监听 接收 读取请求数据</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            s.listen(<span class="number">5</span>)</span><br><span class="line">            connection, address = s.accept()</span><br><span class="line">            request = connection.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">            print(<span class="string">'ip = &#123;&#125;\nrequest = &#123;&#125;'</span>.format(address, request))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 得到HTTP请求的路径</span></span><br><span class="line">                path = request.split()[<span class="number">1</span>]</span><br><span class="line">                <span class="comment"># 根据路径返回响应</span></span><br><span class="line">                responce = responce_for_path(path)</span><br><span class="line">                <span class="comment"># 响应给客户端(浏览器)</span></span><br><span class="line">                connection.sendall(responce)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(<span class="string">'error'</span>, e)</span><br><span class="line">            connection.close</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    config = dict(</span><br><span class="line">        host=<span class="string">''</span>,</span><br><span class="line">        port=<span class="number">3000</span>,</span><br><span class="line">    )</span><br><span class="line">    run(**config)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用socket搭建简单的服务器&quot;&gt;&lt;a href=&quot;#使用socket搭建简单的服务器&quot; class=&quot;headerlink&quot; title=&quot;使用socket搭建简单的服务器&quot;&gt;&lt;/a&gt;使用socket搭建简单的服务器&lt;/h2&gt;&lt;p&gt;socket通信流程&lt;br&gt;
      
    
    </summary>
    
      <category term="Web通信" scheme="http://yoursite.com/categories/Web%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="socket" scheme="http://yoursite.com/tags/socket/"/>
    
      <category term="server" scheme="http://yoursite.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>使用python 原生socket爬取豆瓣top250 (客户端)</title>
    <link href="http://yoursite.com/2018/12/07/%E4%BD%BF%E7%94%A8python-%E5%8E%9F%E7%94%9Fsocket%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3top25/"/>
    <id>http://yoursite.com/2018/12/07/使用python-原生socket爬取豆瓣top25/</id>
    <published>2018-12-07T02:34:10.000Z</published>
    <updated>2018-12-07T08:39:11.884Z</updated>
    
    <content type="html"><![CDATA[<p>了解底层socket原理, 有助于理解网络知识<br>这是一个客户端的编写。</p><p>socket通信流程<br><img src="https://images2017.cnblogs.com/blog/1199740/201709/1199740-20170915104804953-3885330.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用原生socket实现一个具有基本功能的socket, 并抓取了豆瓣top250的数据</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_url</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    解析 url 返回 (protocol host port path)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    protocol = <span class="string">'http'</span></span><br><span class="line">    i = url.find(<span class="string">'://'</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">-1</span>:</span><br><span class="line">        u = url</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        protocol = url[<span class="number">0</span>:i]</span><br><span class="line">        u = url.split(<span class="string">'://'</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 2. 解析host和path</span></span><br><span class="line">    i = u.find(<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">-1</span>:</span><br><span class="line">        host = u</span><br><span class="line">        path = <span class="string">'/'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        host = u[:i]</span><br><span class="line">        path = u[i:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.解析端口</span></span><br><span class="line">    port_dict = &#123;</span><br><span class="line">        <span class="string">'http'</span>: <span class="number">80</span>,</span><br><span class="line">        <span class="string">'https'</span>: <span class="number">443</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 默认端口</span></span><br><span class="line">    port = port_dict[protocol]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">':'</span> <span class="keyword">in</span> host:</span><br><span class="line">        h = host.split(<span class="string">':'</span>)</span><br><span class="line">        host = h[<span class="number">0</span>]</span><br><span class="line">        port = int(h[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print('protocol = &#123;&#125;\nhost = &#123;&#125;\nport = &#123;&#125;\nsearch = &#123;&#125;\n------------'.format(protocol, host, port, path))</span></span><br><span class="line">    <span class="keyword">return</span> protocol, host, port, path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">socket_by_protocol</span><span class="params">(protocol)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据协议返回一个 socket 实例</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> protocol == <span class="string">'http'</span>:</span><br><span class="line">        s = socket.socket()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># HTTPS 协议需要使用 ssl.wrap_socket 包装一下原始的 socket</span></span><br><span class="line">        s = ssl.wrap_socket(socket.socket())</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">response_by_socket</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    参数是一个 socket 实例</span></span><br><span class="line"><span class="string">    返回这个 socket 读取的所有数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    response = <span class="string">b''</span></span><br><span class="line">    buffer_size = <span class="number">1024</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        r = s.recv(buffer_size)</span><br><span class="line">        <span class="keyword">if</span> len(r) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        response += r</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_responce</span><span class="params">(r)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    解析responce, 返回一个(status_code, headers, body)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    headers, body = r.split(<span class="string">'\r\n\r\n'</span>, <span class="number">1</span>)</span><br><span class="line">    h = headers.split(<span class="string">'\r\n'</span>)</span><br><span class="line">    status_code = int(h[<span class="number">0</span>].split(<span class="string">" "</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> h[<span class="number">1</span>:]:</span><br><span class="line">        k, v = line.split(<span class="string">': '</span>)</span><br><span class="line">        headers[k] = v</span><br><span class="line">    <span class="keyword">return</span> status_code, headers, body</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用get访问一个url地址, 并返回响应(status_code, headers, body)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    protocol, host, port, path = parse_url(url)</span><br><span class="line">    s = socket_by_protocol(protocol)</span><br><span class="line"></span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    request = <span class="string">'GET &#123;&#125; HTTP/1.1\r\nhost: &#123;&#125;\r\nConnection: close\r\n\r\n'</span>.format(</span><br><span class="line">        path, host)</span><br><span class="line">    s.send(request.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">    responce = response_by_socket(s).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    status_code, headers, body = parse_responce(responce)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> status_code <span class="keyword">in</span> [<span class="number">301</span>, <span class="number">302</span>]:</span><br><span class="line">        url = headers[<span class="string">'Location'</span>]</span><br><span class="line">        <span class="keyword">return</span> get(url)</span><br><span class="line">    <span class="keyword">return</span> status_code, headers, body</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    url = <span class="string">'http://movie.douban.com/top250'</span></span><br><span class="line">    status_code, headers, body = get(url)</span><br><span class="line">    print(body)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;了解底层socket原理, 有助于理解网络知识&lt;br&gt;这是一个客户端的编写。&lt;/p&gt;
&lt;p&gt;socket通信流程&lt;br&gt;&lt;img src=&quot;https://images2017.cnblogs.com/blog/1199740/201709/1199740-20170915
      
    
    </summary>
    
      <category term="Web通信" scheme="http://yoursite.com/categories/Web%E9%80%9A%E4%BF%A1/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="socket" scheme="http://yoursite.com/tags/socket/"/>
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的三种遍历方式详解</title>
    <link href="http://yoursite.com/2018/12/03/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%89%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/12/03/二叉树的三种遍历方式详解/</id>
    <published>2018-12-03T12:12:32.000Z</published>
    <updated>2018-12-03T13:26:47.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><p>二叉树的遍历方式一般有四种：</p><ul><li>先序遍历</li><li>中序遍历</li><li>后序遍历</li><li>层序遍历<br>因为前三种遍历方式都是采用了递归的方法进行遍历, 这里只介绍前三种</li></ul><p><code>图1：</code><br><img src="http://wx2.sinaimg.cn/mw690/006PpBLogy1fxttx5k6tuj30f10bfq37.jpg" alt></p><h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h2><p>前序遍历:<br>1.访问根节点。2.访问左子树。3.访问右子树</p><p>按照图1, 前序遍历的的遍历方式是</p><blockquote><p>ABDECF</p></blockquote><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>前序遍历:<br>1.访问左子树。2.访问根节点。3.访问右子树</p><p>按照图1, 中序遍历的遍历方式是</p><blockquote><p>DBEACF</p></blockquote><h3 id="中序遍历的性质"><a href="#中序遍历的性质" class="headerlink" title="中序遍历的性质"></a>中序遍历的性质</h3><p>由于中序遍历总是把根结点放在左子树和右子树的中间, 因此只要知道根结点，就可以利用该性质还原出整颗二叉树</p><p>至于如何知道根结点，我们可以通过先序序列或者后序序列</p><p>因此：只要知道<code>前序+中序</code>或者<code>中序+后序</code> 我们就能还原二叉树</p><p>但是<code>前序+中序</code> 是做不到的</p><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p>后序遍历:<br>1.访问左子树。2.访问右子树。 3.访问根节点。</p><p>按照图1, 中序遍历的遍历方式是</p><blockquote><p>DEBFCA</p></blockquote><h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><p>给定后序序列和中序序列, 重建这颗二叉树</p><p><strong>后序遍历: ACBFGED</strong></p><p><strong>中序遍历: ABCDEFG</strong></p><p>先用手工试算出这个前序序列</p><ol><li><p>第一步: 由后序遍历的最后一个元素知道整棵树最初的根节点为D<br><img src="http://wx3.sinaimg.cn/mw690/006PpBLogy1fxtvfh93sdj3058060mx4.jpg" alt></p></li><li><p>第二步:<br>由中序序列知道左子树是｛A,B,C｝， 右子树是｛E,F,G｝</p></li></ol><p>重复一二两步，知道E是右子树的根节点，并存在右子树，没有左子树</p><p>反复套用一二两步规则，最终可得到整颗树<br><img src="http://wx3.sinaimg.cn/mw690/006PpBLogy1fxtvg2hyadj307g08ydfx.jpg" alt></p><h2 id="例题：PAT-1020-Tree-Traversals-（25-分）"><a href="#例题：PAT-1020-Tree-Traversals-（25-分）" class="headerlink" title="例题：PAT 1020 Tree Traversals （25 分）"></a>例题：PAT 1020 Tree Traversals （25 分）</h2><p>给定后序序列和中序序列，求层序序列</p><p>思路：还原整个二叉树，再层序遍历求解层序序列</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;二叉树的遍历&quot;&gt;&lt;a href=&quot;#二叉树的遍历&quot; class=&quot;headerlink&quot; title=&quot;二叉树的遍历&quot;&gt;&lt;/a&gt;二叉树的遍历&lt;/h2&gt;&lt;p&gt;二叉树的遍历方式一般有四种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先序遍历&lt;/li&gt;
&lt;li&gt;中序遍历&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="二叉树的遍历" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
</feed>
